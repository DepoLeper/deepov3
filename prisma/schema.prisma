// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Felhasználói fiók, a NextAuth.js számára is szükséges
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Bejelentkezési session, a NextAuth.js számára
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Felhasználói modell
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  role          String    @default("user") // Alapértelmezett szerepkör
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Agent kapcsolatok
  agentConversations AgentConversation[]
  agentMemories      AgentMemory[]
  generatedContents  GeneratedContent[]
}

// Jelszó-visszaállításhoz vagy email megerősítéshez használt token
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Agent beszélgetés előzmények
model AgentConversation {
  id        String   @id @default(cuid())
  userId    String
  sessionId String
  messages  Json     // Array of messages with role, content, timestamp
  context   Json     // Additional context data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, sessionId])
  @@index([userId])
  @@index([sessionId])
}

// Agent hosszútávú memória
model AgentMemory {
  id         String   @id @default(cuid())
  userId     String
  memoryType String   // 'preference', 'fact', 'pattern', 'feedback'
  key        String
  value      Json     // Flexible JSON storage
  confidence Float    @default(0.8)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, key])
  @@index([userId])
  @@index([memoryType])
}

// Agent személyiség konfigurációk
model AgentPersonality {
  id        String   @id @default(cuid())
  name      String
  config    Json     // Personality traits, system prompt, examples
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([isActive])
}

// Generált tartalmak tárolása
model GeneratedContent {
  id          String   @id @default(cuid())
  userId      String
  type        String   // 'blog', 'newsletter', 'social', 'product_description'
  title       String?
  content     String
  metadata    Json?    // SEO score, keywords, etc.
  status      String   @default("draft") // 'draft', 'approved', 'published'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysis ContentAnalysis?
  
  @@index([userId])
  @@index([type])
  @@index([status])
}

// SEO és tartalom elemzési eredmények
model ContentAnalysis {
  id               String   @id @default(cuid())
  contentId        String   @unique
  seoScore         Int?
  readabilityScore Float?
  keywordDensity   Json?    // Keyword density analysis
  suggestions      Json?    // Array of suggestions
  analyzedAt       DateTime @default(now())
  
  content GeneratedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

// Unas termékek tárolása
model UnasProduct {
  id              String   @id // Unas product ID (not auto-generated)
  sku             String   @unique
  name            String
  unit            String?
  priceNet        Float
  priceGross      Float
  state           String   // 'live', 'draft', 'deleted'
  createTime      String   // Unix timestamp string from API
  lastModTime     String   // Unix timestamp string from API
  
  // Készlet adatok
  stock           String?
  stockStatus     Boolean  @default(false)
  minimumQty      String?
  
  // Kategória adatok
  categoryId      String?
  categoryName    String?
  allCategories   Json?    // Array of categories with id, name, type
  
  // Leírások
  description     String?  @default("")
  shortDescription String? @default("")
  
  // SEO adatok
  seoTitle        String?
  seoDescription  String?
  seoKeywords     String?
  url             String?
  sefUrl          String?
  
  // Képek
  imageUrl        String?
  imageSefUrl     String?
  imageAlt        String?
  
  // Fizikai tulajdonságok
  weight          String?
  
  // Komplex adatok JSON formátumban
  parameters      Json?    // Array of product parameters
  specialPrices   Json?    // Array of special prices for customer groups
  salePrice       Json?    // Active sale price with dates
  groupSalePrices Json?    // Group-specific sale prices
  
  // Szinkronizációs adatok
  syncedAt        DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([sku])
  @@index([state])
  @@index([categoryId])
  @@index([lastModTime])
}

// Unas szinkronizációs log
model UnasSyncLog {
  id            String   @id @default(cuid())
  syncType      String   // 'full', 'incremental', 'single'
  status        String   // 'started', 'completed', 'failed'
  productCount  Int      @default(0)
  successCount  Int      @default(0)
  errorCount    Int      @default(0)
  errorMessages Json?    // Array of error messages
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  
  @@index([status])
  @@index([startedAt])
}
