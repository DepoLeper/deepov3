import { runDeepOAgent } from '@/lib/agent-sdk/OpenAIAgentPOC';
import { PersistentMemoryManager, MemorySearchResult } from './PersistentMemoryManager';
import { SimpleContextLoader, ContextSearchResult } from './SimpleContextLoader';
import { UnasContextLoader, UnasContextResult, getUnasContextLoader } from '../unas/UnasContextLoader';

/**
 * SimpleHybridController v5.0 - Unas API Integr√°ci√≥
 * 
 * FRISS√çTETT ARCHITEKT√öRA:
 * - Memory: PersistentMemoryManager (Prisma + SQLite + Cache)
 * - Context: SimpleContextLoader (Content Guides)
 * - Unas: UnasContextLoader (Web√°ruh√°z term√©kadatok) - √öJ!
 * - OpenAI SDK: Core AI functionality
 * - Hibrid megold√°s: Database + Cache + Term√©kadatok
 */
export class SimpleHybridController {
  private memoryManager: PersistentMemoryManager;
  private contextLoader: SimpleContextLoader;
  private unasContextLoader: UnasContextLoader;
  
  constructor() {
    console.log('üöÄ SimpleHybridController v5.0 inicializ√°lva - Unas API Integration');
    this.memoryManager = new PersistentMemoryManager();
    this.contextLoader = new SimpleContextLoader();
    this.unasContextLoader = getUnasContextLoader();
  }

  /**
   * Hibrid √ºzenet feldolgoz√°s - Persistent Memory + Context + Unas
   */
  async processMessage(
    userId: string,
    sessionId: string,
    message: string
  ): Promise<{
    response: string;
    confidence: number;
    metadata: {
      memoryUsed: boolean;
      contextUsed: boolean;
      unasUsed: boolean;
      productsFound?: number;
      timestamp: string;
      processingTime: number;
    };
  }> {
    const startTime = Date.now();
    
    try {
      console.log(`üì® SimpleHybrid √ºzenet feldolgoz√°sa: ${message}`);
      
      // 1. Memory keres√©s - Persistent Database + Cache
      const memoryResult: MemorySearchResult = await this.memoryManager.searchRelevantMemories(
        userId,
        message
      );
      
      // 2. Context loading - Content Guides
      const contextResult: ContextSearchResult = await this.contextLoader.searchContext(message);
      
      // 3. Unas context loading - Term√©kadatok (√öJ!)
      const unasResult: UnasContextResult = await this.unasContextLoader.searchUnasContext(message);
      
      // 4. Kombin√°lt kontextus √©p√≠t√©s (Memory + Context + Unas)
      const combinedContext = this.buildCombinedContext(memoryResult, contextResult, unasResult);
      
      // 5. OpenAI SDK h√≠v√°s a kombin√°lt kontextussal
      // DeepO agent kontextussal kieg√©sz√≠tett √ºzenet
      const contextualizedMessage = `${combinedContext}\n\nUser √ºzenet: ${message}`;
      
      const agentResponse = await runDeepOAgent(contextualizedMessage, 'main');
      
      // 6. V√°lasz feldolgoz√°sa
      const response = this.extractResponse(agentResponse);
      
      // 7. Besz√©lget√©s ment√©se - Persistent Database
      await this.memoryManager.saveConversation(
        userId,
        sessionId,
        message,
        response
      );
      
      const processingTime = Date.now() - startTime;
      
      // 8. Glob√°lis mem√≥ria √©s Unas statisztik√°k
      await this.logGlobalMemoryStats(userId);
      
      console.log(`‚úÖ SimpleHybrid v√°lasz sikeres (persistent memory + context + unas)`);
      
      return {
        response,
        confidence: unasResult.success ? 0.98 : 0.95, // Unas adatok = m√©g magasabb megb√≠zhat√≥s√°g
        metadata: {
          memoryUsed: memoryResult.relevantConversations.length > 0,
          contextUsed: contextResult.success,
          unasUsed: unasResult.success,
          productsFound: unasResult.productsFound.length,
          timestamp: new Date().toISOString(),
          processingTime
        }
      };
      
    } catch (error) {
      console.error('‚ùå SimpleHybrid feldolgoz√°si hiba:', error);
      
      // Fallback v√°lasz
      return {
        response: 'Sajnos most nem tudok seg√≠teni, de r√∂gz√≠tettem a k√©r√©sed.',
        confidence: 0.1,
        metadata: {
          memoryUsed: false,
          contextUsed: false,
          unasUsed: false,
          productsFound: 0,
          timestamp: new Date().toISOString(),
          processingTime: Date.now() - startTime
        }
      };
    }
  }

  /**
   * Kombin√°lt kontextus √©p√≠t√©s - Memory + Context + Unas
   */
  private buildCombinedContext(memoryResult: MemorySearchResult, contextResult: ContextSearchResult, unasResult: UnasContextResult): string {
    let context = '';
    
    // Memory kontextus
    if (memoryResult.relevantConversations.length > 0) {
      context += `\n\nüß† MEM√ìRIA KONTEXTUS:\n${memoryResult.summary}\n`;
      
      // Top 3 relev√°ns besz√©lget√©s
      const topConversations = memoryResult.relevantConversations.slice(0, 3);
      topConversations.forEach((conv, index) => {
        context += `${index + 1}. User: "${conv.userMessage}" | Assistant: "${conv.assistantMessage.substring(0, 100)}..."\n`;
      });
    }
    
    // Content Guide kontextus
    if (contextResult.success) {
      context += `\n\nüìñ √öTMUTAT√ì KONTEXTUS:\n${contextResult.context}\n`;
      context += `Haszn√°lt √∫tmutat√≥k: ${contextResult.guidesUsed.join(', ')}\n`;
    }
    
    // Unas term√©kadatok kontextus (√öJ!)
    if (unasResult.success) {
      context += `\n\nüõçÔ∏è WEB√ÅRUH√ÅZ ADATOK:\n${unasResult.context}\n`;
      context += `Term√©kek: ${unasResult.productsFound.length}, Kateg√≥ri√°k: ${unasResult.categoriesFound.length}, Aj√°nl√°sok: ${unasResult.recommendations.length}\n`;
      
      if (unasResult.productsFound.length > 0) {
        context += `\nüéØ TERM√âKF√ìKUSZ: A v√°laszodban hangs√∫lyozd a konkr√©t term√©keket, √°rakat √©s el≈ëny√∂ket!\n`;
      }
    }
    
    // Alap DeepO szem√©lyis√©g
    context += `\n\nüéØ DEEPO SZEM√âLYIS√âG:
- Intelligens marketing asszisztens a T-DEPO sz√°m√°ra
- Szak√©rt≈ë SEO, content marketing, social media t√©m√°kban
- Bar√°ts√°gos, seg√≠t≈ëk√©sz, de professzion√°lis hangv√©tel
- Magyar nyelv≈± szak√©rt≈ëi tud√°s
- V√°laszaid legyenek gyakorlatiak √©s actionable`;
    
    return context;
  }

  /**
   * V√°lasz kinyer√©se az OpenAI SDK v√°lasz√°b√≥l
   */
  private extractResponse(agentResponse: any): string {
    try {
      console.log(`üîç Agent response debugging:`, JSON.stringify(agentResponse, null, 2));
      
      // runDeepOAgent v√°lasz strukt√∫ra kezel√©se
      if (agentResponse && agentResponse.success && agentResponse.response) {
        console.log(`‚úÖ runDeepOAgent sikeres v√°lasz: ${agentResponse.response.substring(0, 100)}...`);
        return agentResponse.response;
      }
      
      // runDeepOAgent hiba kezel√©se
      if (agentResponse && !agentResponse.success && agentResponse.error) {
        console.log(`‚ùå runDeepOAgent hiba: ${agentResponse.error}`);
        return `Hiba t√∂rt√©nt: ${agentResponse.error}`;
      }
      
      // Legacy OpenAI SDK v√°lasz strukt√∫r√°k
      if (agentResponse && agentResponse.messages && agentResponse.messages.length > 0) {
        const lastMessage = agentResponse.messages[agentResponse.messages.length - 1];
        return lastMessage?.content || 'Nincs v√°lasz';
      }
      
      // String v√°lasz
      if (typeof agentResponse === 'string') {
        return agentResponse;
      }
      
      // Content property
      if (agentResponse?.content) {
        return agentResponse.content;
      }
      
      console.log(`‚ùå Ismeretlen v√°lasz strukt√∫ra:`, agentResponse);
      return 'Nincs √©rtelmezhet≈ë v√°lasz';
      
    } catch (error) {
      console.error('‚ùå V√°lasz kinyer√©si hiba:', error);
      return 'Hiba a v√°lasz feldolgoz√°s√°ban';
    }
  }

  /**
   * Glob√°lis mem√≥ria √©s Unas statisztik√°k logging
   */
  private async logGlobalMemoryStats(userId: string): Promise<void> {
    try {
      const stats = await this.memoryManager.getMemoryStats(userId);
      
      console.log(`üåê Perzisztens mem√≥ria: ${stats.totalConversations} besz√©lget√©s, ${stats.totalKeywords} kulcssz√≥`);
      console.log(`üìä Cache √°llapot: ${stats.dbStats.cacheSize} cache, ${stats.dbStats.conversationRecords} DB record`);
      
      // Unas cache statisztik√°k
      const unasStats = this.unasContextLoader.getCacheStats();
      console.log(`üõçÔ∏è Unas cache: ${JSON.stringify(unasStats)}`);
      
    } catch (error) {
      console.error('‚ùå Memory stats hiba:', error);
    }
  }

  /**
   * Memory statisztik√°k lek√©r√©se
   */
  async getMemoryStats(userId: string) {
    return await this.memoryManager.getMemoryStats(userId);
  }

  /**
   * Cleanup
   */
  async cleanup(): Promise<void> {
    await this.memoryManager.cleanup();
    console.log('üßπ SimpleHybridController cleanup befejezve');
  }
} 