import { runDeepOAgent } from '@/lib/agent-sdk/OpenAIAgentPOC';
import { SimpleMemoryManager, MemorySearchResult } from './SimpleMemoryManager';
import { SimpleContextLoader, ContextSearchResult } from './SimpleContextLoader';

/**
 * SimpleHybridController - Hibrid megk√∂zel√≠t√©s Memory + Context integr√°ci√≥val
 * 
 * F√ÅZIS 4: SimpleContextLoader integr√°ci√≥ hozz√°adva
 * - Memory: Kor√°bbi besz√©lget√©sek
 * - Context: content_guides.md √∫tmutat√≥k
 * - OpenAI SDK: Core AI functionality
 */
export class SimpleHybridController {
  private memoryManager: SimpleMemoryManager;
  private contextLoader: SimpleContextLoader;
  
  constructor() {
    console.log('üöÄ SimpleHybridController inicializ√°lva');
    this.memoryManager = new SimpleMemoryManager();
    this.contextLoader = new SimpleContextLoader();
  }

  /**
   * F≈ë message processing - OpenAI SDK + Memory + Context integr√°ci√≥
   */
  async processMessage(message: string, userId: string, sessionId: string): Promise<{
    response: string;
    suggestions: string[];
    confidence: number;
    metadata: any;
  }> {
    try {
      console.log('üì® SimpleHybrid √ºzenet feldolgoz√°sa:', message);
      
      // 1. Memory keres√©s - relev√°ns kor√°bbi besz√©lget√©sek
      const memoryResult = await this.memoryManager.searchRelevantMemories(userId, message);
      
      // 2. Context loading - relev√°ns √∫tmutat√≥k
      const contextResult = await this.contextLoader.loadContext(message);
      
      // 3. Kombin√°lt context √©p√≠t√©se
      const combinedContext = this.buildCombinedContext(memoryResult, contextResult);
      
      // 4. Enhanced message az OpenAI SDK sz√°m√°ra
      const enhancedMessage = this.enhanceMessageWithContext(message, combinedContext);
      
      // 5. OpenAI SDK h√≠v√°s (memory + context)
      const result = await runDeepOAgent(enhancedMessage, 'main');
      
      if (!result.success) {
        throw new Error(result.error || 'OpenAI Agent hiba');
      }

      // 6. Besz√©lget√©s ment√©se a mem√≥ri√°ba
      await this.memoryManager.saveConversation(
        userId,
        sessionId,
        message, // eredeti user message
        result.response // agent v√°lasz
      );

      // 7. Status inform√°ci√≥k
      const memoryStats = this.memoryManager.getMemoryStats(userId);
      const contextStatus = this.contextLoader.getStatus();
      const globalMemoryStatus = SimpleMemoryManager.getGlobalMemoryStatus();
      
      console.log(`üåê Glob√°lis mem√≥ria: ${globalMemoryStatus.totalUsers} users, ${globalMemoryStatus.totalConversations} total conversations`);

      // 8. Enhanced v√°lasz form√°z√°sa
      const response = {
        response: result.response,
        suggestions: this.generateContextualSuggestions(memoryResult, contextResult, message),
        confidence: 0.9,
        metadata: {
          agent: result.agent,
          timestamp: result.metadata.timestamp,
          agentType: result.metadata.agentType,
          source: 'SimpleHybridController',
          userId,
          sessionId,
          memory: {
            relevantConversations: memoryResult.relevantConversations.length,
            keywords: memoryResult.keywords,
            summary: memoryResult.summary,
            stats: memoryStats
          },
          context: {
            success: contextResult.success,
            guidesUsed: contextResult.guidesUsed,
            error: contextResult.error,
            status: contextStatus
          }
        }
      };

      console.log('‚úÖ SimpleHybrid v√°lasz sikeres (memory + context)');
      return response;

    } catch (error) {
      console.error('‚ùå SimpleHybrid hiba:', error);
      
      throw new Error(`SimpleHybrid feldolgoz√°si hiba: ${error instanceof Error ? error.message : 'Ismeretlen hiba'}`);
    }
  }

  /**
   * Kombin√°lt context √©p√≠t√©se Memory + Content Guides alapj√°n
   */
  private buildCombinedContext(memoryResult: MemorySearchResult, contextResult: ContextSearchResult): string {
    const contextParts: string[] = [];
    
    // 1. Memory Context (ha van)
    if (memoryResult.relevantConversations.length > 0) {
      contextParts.push('‚ïê‚ïê‚ïê MEM√ìRIA KONTEXTUS ‚ïê‚ïê‚ïê');
      contextParts.push(`${memoryResult.summary}\n`);
      
      // Top 2 legfontosabb kor√°bbi besz√©lget√©s
      memoryResult.relevantConversations.slice(0, 2).forEach((conv, index) => {
        const timeAgo = this.getTimeAgo(conv.timestamp);
        contextParts.push(
          `${index + 1}. ${timeAgo}:`,
          `   "${conv.userMessage}" ‚Üí "${conv.assistantMessage}"`
        );
      });
      
      contextParts.push(''); // √ºres sor
    }
    
    // 2. Content Guides Context (ha van)
    if (contextResult.success && contextResult.context) {
      contextParts.push('‚ïê‚ïê‚ïê √öTMUTAT√ì KONTEXTUS ‚ïê‚ïê‚ïê');
      contextParts.push(`Haszn√°lt √∫tmutat√≥k: ${contextResult.guidesUsed.join(', ')}\n`);
      contextParts.push(contextResult.context);
      contextParts.push(''); // √ºres sor
    }
    
    // 3. Ha nincs semmi kontextus
    if (contextParts.length === 0) {
      return 'Nincs el√©rhet≈ë kontextus inform√°ci√≥.';
    }
    
    return contextParts.join('\n');
  }

  /**
   * Message enhanced-el√©se kombin√°lt context-tel
   */
  private enhanceMessageWithContext(message: string, combinedContext: string): string {
    if (combinedContext === 'Nincs el√©rhet≈ë kontextus inform√°ci√≥.') {
      return message; // Nem enhanced-elj√ºk, ha nincs kontextus
    }

    return `${combinedContext}

‚ïê‚ïê‚ïê JELENLEGI K√âRD√âS ‚ïê‚ïê‚ïê
${message}

INSTRUKCI√ì: A fenti kontextus alapj√°n (mem√≥ria + √∫tmutat√≥k) v√°laszolj. Haszn√°ld a relev√°ns inform√°ci√≥kat √©s hivatkozz kor√°bbi besz√©lget√©sekre, ha van ilyen.`;
  }

  /**
   * Kontextu√°lis javaslatok gener√°l√°sa Memory + Context alapj√°n
   */
  private generateContextualSuggestions(
    memoryResult: MemorySearchResult,
    contextResult: ContextSearchResult, 
    currentMessage: string
  ): string[] {
    const suggestions: string[] = [];

    // Memory alap√∫ javaslatok
    if (memoryResult.relevantConversations.length > 0) {
      const recentTopics = memoryResult.keywords.slice(0, 2);
      if (recentTopics.length > 0) {
        suggestions.push(`Folytassuk a ${recentTopics[0]} t√©m√°t?`);
      }
      suggestions.push('Mit besz√©lt√ºnk err≈ël kor√°bban?');
    }

    // Context alap√∫ javaslatok
    if (contextResult.success && contextResult.guidesUsed.length > 0) {
      if (contextResult.guidesUsed.some(g => g.toLowerCase().includes('blog'))) {
        suggestions.push('K√©sz√≠ts√ºnk bel≈ële blog cikket?');
      }
      if (contextResult.guidesUsed.some(g => g.toLowerCase().includes('seo'))) {
        suggestions.push('Elemezz√ºk SEO szempontb√≥l?');
      }
      if (contextResult.guidesUsed.some(g => g.toLowerCase().includes('social'))) {
        suggestions.push('Social media tartalmat is k√©sz√≠ts√ºnk?');
      }
    }

    // Alap√©rtelmezett javaslatok
    if (suggestions.length === 0) {
      suggestions.push(
        'Elmagyar√°zod r√©szletesebben?',
        'Tov√°bbi inform√°ci√≥kat keresel?',
        'K√©sz√≠ts√ºnk bel≈ële tartalmat?'
      );
    }

    return suggestions.slice(0, 4); // Max 4 javaslat
  }

  /**
   * Id≈ë sz√°m√≠t√°s (mennyi ideje volt)
   */
  private getTimeAgo(timestamp: Date): string {
    const now = new Date();
    const diffMs = now.getTime() - timestamp.getTime();
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMins / 60);
    const diffDays = Math.floor(diffHours / 24);

    if (diffMins < 1) return 'most';
    if (diffMins < 60) return `${diffMins} perce`;
    if (diffHours < 24) return `${diffHours} √≥r√°ja`;
    return `${diffDays} napja`;
  }

  /**
   * Chat interface sz√°m√°ra egyszer≈±s√≠tett met√≥dus
   */
  async chat(message: string, userId: string): Promise<string> {
    const sessionId = `session_${Date.now()}`;
    const result = await this.processMessage(message, userId, sessionId);
    return result.response;
  }

  /**
   * Health check - most context status-szal is
   */
  getStatus(): { status: string; version: string; components: string[] } {
    const contextStatus = this.contextLoader.getStatus();
    const memoryStatus = SimpleMemoryManager.getGlobalMemoryStatus();
    
    return {
      status: contextStatus.loadError ? 'degraded' : 'ok',
      version: '3.0.0-memory-context',
      components: [
        'OpenAI Agents SDK',
        'SimpleMemoryManager',
        `SimpleContextLoader (${contextStatus.totalGuides} √∫tmutat√≥)`
      ]
    };
  }

  /**
   * Debug inform√°ci√≥k lek√©r√©se
   */
  async getDebugInfo() {
    const contextDebug = await this.contextLoader.getDebugInfo();
    const memoryStatus = SimpleMemoryManager.getGlobalMemoryStatus();
    
    return {
      memory: memoryStatus,
      context: contextDebug,
      integration: 'SimpleHybridController v3.0'
    };
  }

  /**
   * Memory management met√≥dusok
   */
  getMemoryStats(userId: string) {
    return this.memoryManager.getMemoryStats(userId);
  }

  clearMemory(userId?: string) {
    this.memoryManager.clearMemory(userId);
  }
} 