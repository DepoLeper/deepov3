/**
 * UnasProductService - Term√©kadatok kezel√©se √©s cache-el√©s
 * 
 * Funkcionalit√°s:
 * - Term√©kadatok lek√©r√©se √©s cache-el√©se
 * - Kateg√≥ria alap√∫ sz≈±r√©s
 * - Keres√©s term√©knevek √©s cikksz√°mok alapj√°n
 * - Integr√°ci√≥ a DeepO agent-tel
 */

import { UnasApiClient, UnasProduct, UnasCategory, getUnasApiClient } from './UnasApiClient';

export interface ProductSearchOptions {
  query?: string;
  category?: string;
  limit?: number;
  includeDescription?: boolean;
  priceRange?: {
    min?: number;
    max?: number;
  };
}

export interface ProductSearchResult {
  products: UnasProduct[];
  categories: UnasCategory[];
  totalCount: number;
  searchQuery: string;
}

export class UnasProductService {
  private apiClient: UnasApiClient;
  private productCache: Map<string, { data: UnasProduct[]; timestamp: Date }> = new Map();
  private categoryCache: Map<string, { data: UnasCategory[]; timestamp: Date }> = new Map();
  private cacheExpiry = 10 * 60 * 1000; // 10 perc

  constructor(apiClient: UnasApiClient) {
    this.apiClient = apiClient;
    console.log('üõçÔ∏è UnasProductService inicializ√°lva');
  }

  /**
   * Term√©kek keres√©se
   */
  async searchProducts(options: ProductSearchOptions = {}): Promise<ProductSearchResult> {
    console.log('üîç Term√©kek keres√©se:', options);

    try {
      // Cache kulcs gener√°l√°sa
      const cacheKey = this.generateCacheKey('products', options);
      const cached = this.getFromCache(this.productCache, cacheKey);
      
      if (cached) {
        console.log('üì¶ Term√©kek cache-b≈ël bet√∂ltve');
        return this.filterAndFormatProducts(cached, options);
      }

      // API lek√©r√©s
      const products = await this.apiClient.getProducts({
        limit: options.limit || 50,
        contentType: options.includeDescription ? 'full' : 'normal'
      });

      // Cache-be ment√©s
      this.setCache(this.productCache, cacheKey, products);

      console.log(`‚úÖ ${products.length} term√©k lek√©rve az API-b√≥l`);
      return this.filterAndFormatProducts(products, options);

    } catch (error) {
      console.error('‚ùå Term√©k keres√©s hiba:', error);
      throw new Error(`Product search failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Kateg√≥ri√°k lek√©r√©se
   */
  async getCategories(limit?: number): Promise<UnasCategory[]> {
    console.log('üìÅ Kateg√≥ri√°k lek√©r√©se');

    try {
      const cacheKey = `categories_${limit || 'all'}`;
      const cached = this.getFromCache(this.categoryCache, cacheKey);
      
      if (cached) {
        console.log('üì¶ Kateg√≥ri√°k cache-b≈ël bet√∂ltve');
        return cached;
      }

      // API lek√©r√©s
      const categories = await this.apiClient.getCategories({ limit });

      // Cache-be ment√©s
      this.setCache(this.categoryCache, cacheKey, categories);

      console.log(`‚úÖ ${categories.length} kateg√≥ria lek√©rve`);
      return categories;

    } catch (error) {
      console.error('‚ùå Kateg√≥ria lek√©r√©s hiba:', error);
      throw new Error(`Category fetch failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Specifikus term√©k lek√©r√©se cikksz√°m alapj√°n
   */
  async getProductBySku(sku: string): Promise<UnasProduct | null> {
    console.log('üîç Term√©k keres√©se cikksz√°m alapj√°n:', sku);

    try {
      const products = await this.apiClient.getProducts({ sku, contentType: 'full' });
      
      if (products.length === 0) {
        console.log(`‚ùå Term√©k nem tal√°lhat√≥: ${sku}`);
        return null;
      }

      console.log(`‚úÖ Term√©k megtal√°lva: ${products[0].Name}`);
      return products[0];

    } catch (error) {
      console.error('‚ùå Term√©k lek√©r√©s hiba:', error);
      throw new Error(`Product fetch failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Term√©kaj√°nl√°sok kateg√≥ria alapj√°n
   */
  async getProductRecommendations(categoryId: number, limit: number = 5): Promise<UnasProduct[]> {
    console.log('üí° Term√©kaj√°nl√°sok lek√©r√©se:', { categoryId, limit });

    try {
      const products = await this.apiClient.getProducts({
        categoryId,
        limit,
        contentType: 'short'
      });

      console.log(`‚úÖ ${products.length} term√©kaj√°nl√°s lek√©rve`);
      return products;

    } catch (error) {
      console.error('‚ùå Term√©kaj√°nl√°s lek√©r√©s hiba:', error);
      throw new Error(`Product recommendations failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Term√©kadatok sz≈±r√©se √©s form√°z√°sa
   */
  private filterAndFormatProducts(products: UnasProduct[], options: ProductSearchOptions): ProductSearchResult {
    let filteredProducts = [...products];

    // Sz√∂veges keres√©s
    if (options.query) {
      const query = options.query.toLowerCase();
      filteredProducts = filteredProducts.filter(product => 
        product.Name.toLowerCase().includes(query) ||
        product.Sku.toLowerCase().includes(query) ||
        (product.Description && product.Description.toLowerCase().includes(query))
      );
    }

    // Kateg√≥ria sz≈±r√©s
    if (options.category) {
      filteredProducts = filteredProducts.filter(product => 
        product.Category && product.Category.toLowerCase().includes(options.category!.toLowerCase())
      );
    }

    // √År sz≈±r√©s
    if (options.priceRange) {
      filteredProducts = filteredProducts.filter(product => {
        if (!product.Price) return false;
        
        const min = options.priceRange!.min || 0;
        const max = options.priceRange!.max || Infinity;
        
        return product.Price >= min && product.Price <= max;
      });
    }

    // Limit alkalmaz√°sa
    if (options.limit) {
      filteredProducts = filteredProducts.slice(0, options.limit);
    }

    // Kateg√≥ri√°k gy≈±jt√©se
    const categories = [...new Set(filteredProducts.map(p => p.Category).filter(Boolean))]
      .map(categoryName => ({
        Id: '', // Nincs ID, csak n√©v alapj√°n
        Name: categoryName!,
        Description: '',
        Products: filteredProducts.filter(p => p.Category === categoryName)
      }));

    return {
      products: filteredProducts,
      categories,
      totalCount: filteredProducts.length,
      searchQuery: options.query || ''
    };
  }

  /**
   * Cache kulcs gener√°l√°sa
   */
  private generateCacheKey(type: string, options: any): string {
    return `${type}_${JSON.stringify(options)}`;
  }

  /**
   * Cache-b≈ël lek√©r√©s
   */
  private getFromCache<T>(cache: Map<string, { data: T; timestamp: Date }>, key: string): T | null {
    const cached = cache.get(key);
    if (!cached) return null;

    // Lej√°rt-e a cache?
    if (new Date().getTime() - cached.timestamp.getTime() > this.cacheExpiry) {
      cache.delete(key);
      return null;
    }

    return cached.data;
  }

  /**
   * Cache-be ment√©s
   */
  private setCache<T>(cache: Map<string, { data: T; timestamp: Date }>, key: string, data: T): void {
    cache.set(key, {
      data,
      timestamp: new Date()
    });
  }

  /**
   * Cache tiszt√≠t√°sa
   */
  clearCache(): void {
    this.productCache.clear();
    this.categoryCache.clear();
    console.log('üßπ Cache tiszt√≠tva');
  }

  /**
   * Cache statisztik√°k
   */
  getCacheStats(): {
    productCacheSize: number;
    categoryCacheSize: number;
    cacheExpiryMinutes: number;
  } {
    return {
      productCacheSize: this.productCache.size,
      categoryCacheSize: this.categoryCache.size,
      cacheExpiryMinutes: this.cacheExpiry / (60 * 1000)
    };
  }

  /**
   * API kapcsolat tesztel√©se
   */
  async testConnection(): Promise<{success: boolean; message: string; data?: any}> {
    try {
      console.log('üîç Unas API kapcsolat tesztel√©se...');
      
      // API kliens tesztel√©se
      const apiTest = await this.apiClient.testConnection();
      if (!apiTest.success) {
        return apiTest;
      }

      // N√©h√°ny term√©k lek√©r√©se
      const testProducts = await this.searchProducts({ limit: 3 });
      
      // Kateg√≥ri√°k lek√©r√©se
      const testCategories = await this.getCategories(5);

      return {
        success: true,
        message: `‚úÖ UnasProductService m≈±k√∂dik! ${testProducts.totalCount} term√©k, ${testCategories.length} kateg√≥ria`,
        data: {
          ...apiTest.data,
          sampleProducts: testProducts.products,
          sampleCategories: testCategories,
          cacheStats: this.getCacheStats()
        }
      };

    } catch (error) {
      return {
        success: false,
        message: `‚ùå UnasProductService hiba: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  }
}

// Singleton instance export√°l√°sa
let unasProductService: UnasProductService | null = null;

export function getUnasProductService(apiClient?: UnasApiClient): UnasProductService {
  if (!unasProductService && apiClient) {
    unasProductService = new UnasProductService(apiClient);
  }
  
  if (!unasProductService) {
    throw new Error('UnasProductService not initialized. Provide UnasApiClient on first call.');
  }
  
  return unasProductService;
}

export default UnasProductService; 