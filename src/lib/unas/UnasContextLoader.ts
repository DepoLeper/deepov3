/**
 * UnasContextLoader - Unas term√©kadatok integr√°l√°sa a DeepO kontextusba
 * 
 * Funkcionalit√°s:
 * - Term√©kspecifikus kontextus √©p√≠t√©s
 * - Kateg√≥ria-alap√∫ aj√°nl√°sok
 * - SEO optimaliz√°lt term√©kle√≠r√°sok
 * - Automatikus term√©ktal√°latok kulcsszavak alapj√°n
 */

import { UnasApiClient, UnasProduct, UnasCategory, getUnasApiClient } from './UnasApiClient';
import { UnasProductService, getUnasProductService, ProductSearchResult } from './UnasProductService';

export interface UnasContextResult {
  success: boolean;
  context: string;
  productsFound: UnasProduct[];
  categoriesFound: UnasCategory[];
  recommendations: UnasProduct[];
  metadata: {
    searchTerms: string[];
    totalProducts: number;
    totalCategories: number;
    processingTime: number;
  };
}

export interface UnasSearchAnalysis {
  detectedKeywords: string[];
  productIntent: boolean;
  categoryIntent: boolean;
  commercialIntent: 'none' | 'low' | 'medium' | 'high';
  intentType: 'informational' | 'navigational' | 'commercial' | 'transactional';
}

export class UnasContextLoader {
  private apiClient: UnasApiClient | null = null;
  private productService: UnasProductService | null = null;
  private isInitialized = false;

  constructor() {
    console.log('üõçÔ∏è UnasContextLoader inicializ√°lva');
  }

  /**
   * Inicializ√°l√°s (csak ha van API kulcs)
   */
  private async initialize(): Promise<boolean> {
    if (this.isInitialized) return true;

    try {
      const apiKey = process.env.UNAS_API_KEY;
      if (!apiKey) {
        console.log('‚ö†Ô∏è UNAS_API_KEY nincs be√°ll√≠tva - UnasContextLoader disabled');
        return false;
      }

      this.apiClient = getUnasApiClient({
        apiKey,
        timeout: 30000
      });

      this.productService = getUnasProductService(this.apiClient);
      this.isInitialized = true;

      console.log('‚úÖ UnasContextLoader inicializ√°lva API kulccsal');
      return true;

    } catch (error) {
      console.error('‚ùå UnasContextLoader inicializ√°l√°si hiba:', error);
      return false;
    }
  }

  /**
   * F≈ë met√≥dus: Unas kontextus keres√©s √ºzenet alapj√°n
   */
  async searchUnasContext(message: string): Promise<UnasContextResult> {
    const startTime = Date.now();

    try {
      // Inicializ√°l√°s ellen≈ërz√©se
      const initialized = await this.initialize();
      if (!initialized || !this.productService) {
        return this.createEmptyResult(startTime);
      }

      console.log('üîç Unas kontextus keres√©s:', message);

      // 1. √úzenet elemz√©se
      const analysis = this.analyzeMessage(message);
      console.log('üìä √úzenet elemz√©s:', analysis);

      // 2. Ha nincs term√©k/kereskedelmi sz√°nd√©k, √ºres eredm√©ny
      if (analysis.commercialIntent === 'none') {
        console.log('‚ÑπÔ∏è Nincs kereskedelmi sz√°nd√©k - nincs Unas kontextus');
        return this.createEmptyResult(startTime);
      }

      // 3. Term√©kek keres√©se
      const products = await this.searchRelevantProducts(analysis);
      
      // 4. Kateg√≥ri√°k lek√©r√©se
      const categories = await this.getRelevantCategories();

      // 5. Aj√°nl√°sok gener√°l√°sa
      const recommendations = await this.generateRecommendations(products, analysis);

      // 6. Kontextus √©p√≠t√©s
      const context = this.buildUnasContext(products, categories, recommendations, analysis);

      const processingTime = Date.now() - startTime;

      console.log(`‚úÖ Unas kontextus √©p√≠tve: ${products.length} term√©k, ${categories.length} kateg√≥ria`);

      return {
        success: true,
        context,
        productsFound: products,
        categoriesFound: categories,
        recommendations,
        metadata: {
          searchTerms: analysis.detectedKeywords,
          totalProducts: products.length,
          totalCategories: categories.length,
          processingTime
        }
      };

    } catch (error) {
      console.error('‚ùå Unas kontextus keres√©si hiba:', error);
      return this.createEmptyResult(startTime, error);
    }
  }

  /**
   * √úzenet elemz√©se term√©k/kereskedelmi sz√°nd√©k felismer√©shez
   */
  private analyzeMessage(message: string): UnasSearchAnalysis {
    const lowerMessage = message.toLowerCase();

    // Term√©k kulcsszavak (T-DEPO specifikus)
    const productKeywords = [
      'term√©k', 'product', '√°r√∫', 'v√°s√°rl√°s', 'buy', 'price', '√°r', 'bolt', 'shop',
      'takar√≠t√≥', 'tiszt√≠t√≥', 'higi√©nia', 'fert≈ëtlen√≠t≈ë', 'k√©zfert≈ëtlen√≠t≈ë',
      'szappan', 'mos√≥szer', 'tiszt√≠t√≥szer', 'pap√≠rt√∂rl≈ë', 'wc pap√≠r',
      'keszty≈±', 'maszk', 'v√©d≈ëfelszerel√©s', 'irodaszer', 'equipment'
    ];

    const commercialKeywords = [
      'aj√°nlat', 'akci√≥', 'kedvezm√©ny', 'sale', 'offer', 'discount',
      '√∂sszehasonl√≠t', 'compare', 'teszt', 'review', 'v√©lem√©ny',
      'legjobb', 'best', 'top', 'recommended', 'aj√°nlott'
    ];

    const transactionalKeywords = [
      'megvesz', 'rendel', 'order', 'kos√°r', 'cart', 'checkout',
      'sz√°ll√≠t√°s', 'delivery', 'payment', 'fizet√©s'
    ];

    // Kulcsszavak detekt√°l√°sa
    const detectedKeywords: string[] = [];
    
    productKeywords.forEach(keyword => {
      if (lowerMessage.includes(keyword)) {
        detectedKeywords.push(keyword);
      }
    });

    commercialKeywords.forEach(keyword => {
      if (lowerMessage.includes(keyword)) {
        detectedKeywords.push(keyword);
      }
    });

    transactionalKeywords.forEach(keyword => {
      if (lowerMessage.includes(keyword)) {
        detectedKeywords.push(keyword);
      }
    });

    // Sz√°nd√©k t√≠pus meghat√°roz√°sa
    let intentType: 'informational' | 'navigational' | 'commercial' | 'transactional' = 'informational';
    let commercialIntent: 'none' | 'low' | 'medium' | 'high' = 'none';

    if (transactionalKeywords.some(kw => lowerMessage.includes(kw))) {
      intentType = 'transactional';
      commercialIntent = 'high';
    } else if (commercialKeywords.some(kw => lowerMessage.includes(kw))) {
      intentType = 'commercial';
      commercialIntent = 'medium';
    } else if (productKeywords.some(kw => lowerMessage.includes(kw))) {
      intentType = 'commercial';
      commercialIntent = 'low';
    }

    const productIntent = productKeywords.some(kw => lowerMessage.includes(kw));
    const categoryIntent = lowerMessage.includes('kateg√≥ria') || lowerMessage.includes('category');

    return {
      detectedKeywords,
      productIntent,
      categoryIntent,
      commercialIntent,
      intentType
    };
  }

  /**
   * Relev√°ns term√©kek keres√©se
   */
  private async searchRelevantProducts(analysis: UnasSearchAnalysis): Promise<UnasProduct[]> {
    if (!this.productService) return [];

    try {
      // Keres√©si param√©terek √©p√≠t√©se
      const searchOptions = {
        query: analysis.detectedKeywords.join(' '),
        limit: analysis.commercialIntent === 'high' ? 10 : 5,
        includeDescription: analysis.commercialIntent !== 'none'
      };

      const searchResult = await this.productService.searchProducts(searchOptions);
      
      console.log(`üõí ${searchResult.totalCount} term√©k tal√°lat`);
      return searchResult.products;

    } catch (error) {
      console.error('‚ùå Term√©k keres√©si hiba:', error);
      return [];
    }
  }

  /**
   * Relev√°ns kateg√≥ri√°k lek√©r√©se
   */
  private async getRelevantCategories(): Promise<UnasCategory[]> {
    if (!this.productService) return [];

    try {
      const categories = await this.productService.getCategories(10);
      console.log(`üìÅ ${categories.length} kateg√≥ria bet√∂ltve`);
      return categories;

    } catch (error) {
      console.error('‚ùå Kateg√≥ria lek√©r√©si hiba:', error);
      return [];
    }
  }

  /**
   * Term√©kaj√°nl√°sok gener√°l√°sa
   */
  private async generateRecommendations(
    products: UnasProduct[], 
    analysis: UnasSearchAnalysis
  ): Promise<UnasProduct[]> {
    if (!this.productService || products.length === 0) return [];

    try {
      // Ha van konkr√©t term√©k tal√°lat, aj√°nljunk hasonl√≥kat
      const firstProduct = products[0];
      
      // Egyszer≈± aj√°nl√°s: ugyanabb√≥l a kateg√≥ri√°b√≥l
      if (firstProduct.Category) {
        const relatedProducts = await this.productService.searchProducts({
          category: firstProduct.Category,
          limit: 3
        });
        
        // Sz≈±rj√ºk ki azokat, amik m√°r benne vannak
        const recommendations = relatedProducts.products.filter(
          rec => !products.some(prod => prod.Id === rec.Id)
        );

        console.log(`üí° ${recommendations.length} aj√°nl√°s gener√°lva`);
        return recommendations.slice(0, 3);
      }

      return [];

    } catch (error) {
      console.error('‚ùå Aj√°nl√°s gener√°l√°si hiba:', error);
      return [];
    }
  }

  /**
   * Unas kontextus string √©p√≠t√©se
   */
  private buildUnasContext(
    products: UnasProduct[],
    categories: UnasCategory[],
    recommendations: UnasProduct[],
    analysis: UnasSearchAnalysis
  ): string {
    let context = '';

    // Term√©kadatok kontextus
    if (products.length > 0) {
      context += `\n\nüõçÔ∏è TERM√âKADATOK (${products.length} tal√°lat):\n`;
      
      products.slice(0, 5).forEach((product, index) => {
        context += `${index + 1}. "${product.Name}" (SKU: ${product.Sku})`;
        if (product.Price) context += ` - ${product.Price} Ft`;
        if (product.Category) context += ` [${product.Category}]`;
        if (product.Description) context += `\n   Le√≠r√°s: ${product.Description.substring(0, 150)}...`;
        context += '\n';
      });
    }

    // Kateg√≥ria kontextus
    if (categories.length > 0) {
      context += `\nüìÅ EL√âRHET≈ê KATEG√ìRI√ÅK:\n`;
      categories.slice(0, 5).forEach((category, index) => {
        context += `- ${category.Name}`;
        if (category.Description) context += ` (${category.Description})`;
        context += '\n';
      });
    }

    // Aj√°nl√°sok
    if (recommendations.length > 0) {
      context += `\nüí° KAPCSOL√ìD√ì AJ√ÅNL√ÅSOK:\n`;
      recommendations.forEach((rec, index) => {
        context += `- "${rec.Name}" (${rec.Sku})`;
        if (rec.Price) context += ` - ${rec.Price} Ft`;
        context += '\n';
      });
    }

    // Kereskedelmi sz√°nd√©k szerinti utas√≠t√°sok
    context += `\nüéØ TARTALMI IR√ÅNYELVEK:\n`;
    
    switch (analysis.commercialIntent) {
      case 'high':
        context += `- Konkr√©t v√°s√°rl√°si d√∂nt√©st t√°mogat√≥ tartalom
- Term√©kek r√©szletes √∂sszehasonl√≠t√°sa
- √Årak, el≈ëny√∂k, specifik√°ci√≥k kiemel√©se
- Call-to-action a v√°s√°rl√°sra`;
        break;
      
      case 'medium':
        context += `- Informat√≠v, de term√©kcentrikus tartalom
- Term√©kjellemz≈ëk gyakorlati el≈ënyeinek bemutat√°sa
- V√°s√°rl√°si tippek √©s √∫tmutat√≥k
- Soft term√©kaj√°nl√°sok`;
        break;
      
      case 'low':
        context += `- √Åltal√°nos inform√°ci√≥s tartalom term√©kreferenci√°kkal
- Oktat√≥ jelleg≈± tartalom
- Term√©kek mint p√©ld√°k/illusztr√°ci√≥k
- Brand√©p√≠t≈ë kommunik√°ci√≥`;
        break;
    }

    context += `\n\nSZAND√âK T√çPUS: ${analysis.intentType}`;
    context += `\nKULCSSZAVAK: ${analysis.detectedKeywords.join(', ')}`;

    return context;
  }

  /**
   * √úres eredm√©ny l√©trehoz√°sa
   */
  private createEmptyResult(startTime: number, error?: any): UnasContextResult {
    return {
      success: false,
      context: '',
      productsFound: [],
      categoriesFound: [],
      recommendations: [],
      metadata: {
        searchTerms: [],
        totalProducts: 0,
        totalCategories: 0,
        processingTime: Date.now() - startTime
      }
    };
  }

  /**
   * API kapcsolat tesztel√©se
   */
  async testConnection(): Promise<{success: boolean; message: string}> {
    try {
      const initialized = await this.initialize();
      if (!initialized || !this.productService) {
        return {
          success: false,
          message: 'Unas API nincs konfigur√°lva (UNAS_API_KEY hi√°nyzik)'
        };
      }

      const testResult = await this.productService.testConnection();
      return testResult;

    } catch (error) {
      return {
        success: false,
        message: `UnasContextLoader teszt hiba: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  }

  /**
   * Cache statisztik√°k
   */
  getCacheStats() {
    if (!this.productService) {
      return { message: 'UnasProductService nincs inicializ√°lva' };
    }
    
    return this.productService.getCacheStats();
  }
}

// Singleton instance export√°l√°sa
let unasContextLoader: UnasContextLoader | null = null;

export function getUnasContextLoader(): UnasContextLoader {
  if (!unasContextLoader) {
    unasContextLoader = new UnasContextLoader();
  }
  
  return unasContextLoader;
}

export default UnasContextLoader; 