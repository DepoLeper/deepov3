import { PrismaClient, AgentPersonality } from '@prisma/client';

export interface PersonalityTraits {
  tone: 'k√∂zvetlen' | 'szakmai' | 'humoros' | 'bar√°ts√°gos' | 'mag√°z√≥d√≥';
  formality: 'inform√°lis' | 'f√©lform√°lis' | 'form√°lis';
  enthusiasm: 'alacsony' | 'k√∂zepes' | 'magas';
  creativity: 'konzervat√≠v' | 'kiegyens√∫lyozott' | 'kreat√≠v';
  technicality: 'egyszer≈±' | 'kiegyens√∫lyozott' | 'szakmai';
}

// Context mapping konfigur√°ci√≥
export interface PersonalityContext {
  keywords: string[];           // Kulcsszavak amikre reag√°l
  useCases: string[];          // Konkr√©t haszn√°lati esetek
  contentTypes: string[];      // Tartalom t√≠pusok (blog, email, social, stb.)
  targetAudience: string[];    // C√©lk√∂z√∂ns√©g (B2B, B2C, szakmai, stb.)
  priority: number;            // 1-10 priorit√°s (magasabb = fontosabb)
}

// AgentPersonality JSON config strukt√∫ra
export interface AgentPersonalityConfig {
  description: string;
  traits: PersonalityTraits;
  systemPrompt: string;
  examples: string[];
  context: PersonalityContext; // √öJ: Kontextus mapping
}

export interface PersonalityConfig {
  id: string;
  name: string;
  description: string;
  traits: PersonalityTraits;
  systemPrompt: string;
  examples: string[];
  context: PersonalityContext;  // √öJ: Kontextus mapping
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

// Intelligens szem√©lyis√©g v√°laszt√≥
export class PersonalityMatcher {
  /**
   * Megtal√°lja a legmegfelel≈ëbb szem√©lyis√©get a user k√©r√©se alapj√°n
   */
  static findBestMatch(userMessage: string, personalities: PersonalityConfig[]): PersonalityConfig | null {
    const messageWords = userMessage.toLowerCase().split(/\s+/);
    const scores: Array<{personality: PersonalityConfig, score: number}> = [];

    for (const personality of personalities) {
      let score = 0;
      
      // 1. Kulcssz√≥ egyez√©sek (s√∫lyozott)
      for (const keyword of personality.context.keywords) {
        if (messageWords.some(word => word.includes(keyword.toLowerCase()) || keyword.toLowerCase().includes(word))) {
          score += 3; // Kulcssz√≥ tal√°lat = 3 pont
        }
      }
      
      // 2. Tartalom t√≠pus egyez√©sek
      for (const contentType of personality.context.contentTypes) {
        if (messageWords.some(word => word.includes(contentType.toLowerCase()) || contentType.toLowerCase().includes(word))) {
          score += 2; // Tartalom t√≠pus = 2 pont
        }
      }
      
      // 3. Haszn√°lati eset egyez√©sek
      for (const useCase of personality.context.useCases) {
        const useCaseWords = useCase.toLowerCase().split(/\s+/);
        if (useCaseWords.some(ucWord => messageWords.includes(ucWord))) {
          score += 1; // Haszn√°lati eset = 1 pont
        }
      }
      
      // 4. Priorit√°s b√≥nusz (magasabb priorit√°s = extra pont)
      score += personality.context.priority * 0.1;
      
      scores.push({personality, score});
    }
    
    // Rendez√©s pontsz√°m szerint (cs√∂kken≈ë)
    scores.sort((a, b) => b.score - a.score);
    
    // Ha a legjobb pontsz√°m >= 2, akkor azt visszaadjuk
    if (scores.length > 0 && scores[0].score >= 2) {
      return scores[0].personality;
    }
    
    // K√ºl√∂nben default szem√©lyis√©g
    return personalities.find(p => p.id === 'deepo_default') || null;
  }
  
  /**
   * Debug inform√°ci√≥ a matching folyamatr√≥l
   */
  static getMatchingDetails(userMessage: string, personalities: PersonalityConfig[]): any {
    const messageWords = userMessage.toLowerCase().split(/\s+/);
    const details: any[] = [];

    for (const personality of personalities) {
      let score = 0;
      const matches: any = {keywords: [], contentTypes: [], useCases: []};
      
      // Kulcssz√≥ egyez√©sek
      for (const keyword of personality.context.keywords) {
        if (messageWords.some(word => word.includes(keyword.toLowerCase()) || keyword.toLowerCase().includes(word))) {
          score += 3;
          matches.keywords.push(keyword);
        }
      }
      
      // Tartalom t√≠pus egyez√©sek
      for (const contentType of personality.context.contentTypes) {
        if (messageWords.some(word => word.includes(contentType.toLowerCase()) || contentType.toLowerCase().includes(word))) {
          score += 2;
          matches.contentTypes.push(contentType);
        }
      }
      
      // Haszn√°lati eset egyez√©sek
      for (const useCase of personality.context.useCases) {
        const useCaseWords = useCase.toLowerCase().split(/\s+/);
        if (useCaseWords.some(ucWord => messageWords.includes(ucWord))) {
          score += 1;
          matches.useCases.push(useCase);
        }
      }
      
      score += personality.context.priority * 0.1;
      
      details.push({
        id: personality.id,
        name: personality.name,
        score: Math.round(score * 10) / 10,
        matches
      });
    }
    
    return {
      userMessage,
      messageWords,
      personalities: details.sort((a, b) => b.score - a.score)
    };
  }
}

export class PersonalityEngine {
  private prisma: PrismaClient;
  private currentPersonality: PersonalityConfig | null = null;
  private defaultPersonalities: PersonalityConfig[] = [];
  private personalityMatcher = PersonalityMatcher;

  // Adapter met√≥dusok: AgentPersonality (DB) ‚Üî PersonalityConfig (Internal)
  
  /**
   * AgentPersonality (DB model) ‚Üí PersonalityConfig (Internal interface)
   */
  private fromDbModel(dbModel: AgentPersonality): PersonalityConfig {
    const config = dbModel.config as AgentPersonalityConfig;
    
    // Fallback context ha nincs defini√°lva (r√©gi szem√©lyis√©gek)
    const defaultContext: PersonalityContext = {
      keywords: ['√°ltal√°nos'],
      useCases: ['alap√©rtelmezett haszn√°lat'],
      contentTypes: ['√°ltal√°nos tartalom'],
      targetAudience: ['√°ltal√°nos'],
      priority: 5
    };
    
    return {
      id: dbModel.id,
      name: dbModel.name,
      description: config.description,
      traits: config.traits,
      systemPrompt: config.systemPrompt,
      examples: config.examples,
      context: config.context || defaultContext, // JAV√çT√ÅS: fallback context
      isActive: dbModel.isActive,
      createdAt: dbModel.createdAt,
      updatedAt: dbModel.updatedAt
    };
  }

  /**
   * PersonalityConfig (Internal) ‚Üí AgentPersonality data (DB format)
   */
  private toDbModel(personality: PersonalityConfig): {
    name: string;
    config: AgentPersonalityConfig;
    isActive: boolean;
  } {
    return {
      name: personality.name,
      config: {
        description: personality.description,
        traits: personality.traits,
        systemPrompt: personality.systemPrompt,
        examples: personality.examples,
        context: personality.context // JAV√çT√ÅS: context mez≈ë hozz√°ad√°sa
      },
      isActive: personality.isActive
    };
  }

  constructor(personalityId?: string) {
    this.prisma = new PrismaClient();
    this.initializeDefaultPersonalities();
    
    if (personalityId) {
      this.loadPersonality(personalityId);
    }
  }

  /**
   * Alap√©rtelmezett szem√©lyis√©gek l√©trehoz√°sa az adatb√°zisban (ha m√©g nincsenek)
   */
  private async seedDefaultPersonalities(): Promise<void> {
    try {
      for (const personality of this.defaultPersonalities) {
        const dbData = this.toDbModel(personality);
        
        // UPSERT: L√©trehozza vagy friss√≠ti a szem√©lyis√©get (context mez≈ëvel egy√ºtt)
        await this.prisma.agentPersonality.upsert({
          where: { id: personality.id },
          update: {
            name: dbData.name,
            config: dbData.config,
            isActive: dbData.isActive,
            updatedAt: new Date()
          },
          create: {
            id: personality.id,
            ...dbData
          }
        });
        
        console.log(`‚úÖ Alap√©rtelmezett szem√©lyis√©g friss√≠tve/l√©trehozva: ${personality.name}`);
      }
    } catch (error) {
      console.error('Default personalities seeding error:', error);
      // Nem dobunk hib√°t, mert ez nem kritikus
    }
  }

  private initializeDefaultPersonalities(): void {
    this.defaultPersonalities = [
      {
        id: 'deepo_default',
        name: 'DeepO Alap√©rtelmezett',
        description: 'A DeepO alap√©rtelmezett szem√©lyis√©ge - k√∂zvetlen, szak√©rt≈ë, seg√≠t≈ëk√©sz',
        traits: {
          tone: 'k√∂zvetlen',
          formality: 'f√©lform√°lis',
          enthusiasm: 'k√∂zepes',
          creativity: 'kiegyens√∫lyozott',
          technicality: 'kiegyens√∫lyozott'
        },
        systemPrompt: `Te vagy a DeepO, a T-Depo marketingcsapat√°nak intelligens AI asszisztense. 

SZEM√âLYIS√âG √âS HANGNEM:
- K√∂zvetlen, de seg√≠t≈ëk√©sz hangnem
- Tegez≈ëd√©s, de szakmai korrekts√©g
- Pozit√≠v, lelkes hozz√°√°ll√°s
- Gyakorlati, megval√≥s√≠that√≥ tan√°csok
- Kreat√≠v, de megalapozott √∂tletek

KOMMUNIK√ÅCI√ìS ST√çLUS:
- R√∂vid, t√∂m√∂r v√°laszok
- Konkr√©t p√©ld√°k √©s javaslatok
- Emoji haszn√°lata m√©rt√©kkel (üòä, üí°, üöÄ)
- K√©rd√©sek feltev√©se a pontosabb seg√≠ts√©g √©rdek√©ben

SZAKMAI TUD√ÅS:
- Marketing √©s tartalomk√©sz√≠t√©s specialista
- SEO √©s web√°ruh√°z optimaliz√°l√°s
- B2B kommunik√°ci√≥
- Higi√©niai √©s munkav√©delmi term√©kek ismerete

FONTOS SZAB√ÅLYOK:
- Mindig eml√©kezz√©l a kor√°bbi besz√©lget√©sekre
- K√©rdezz vissza, ha b√°rmiben bizonytalan vagy
- Haszn√°ld fel a rendelkez√©sre √°ll√≥ √∫tmutat√≥kat
- Legy√©l proakt√≠v √©s javaslj tov√°bbi l√©p√©seket`,
        examples: [
          'Szuper! Egy SEO-optimaliz√°lt blog cikket szeretn√©l √≠rni? üöÄ Milyen t√©m√°ban gondolkodsz?',
          '√ârtem, hogy a h√≠rleveled hangneme t√∫l sz√°raz. Pr√≥b√°ljuk meg humoros elemekkel f≈±szerezni! üòä',
          'Ez egy kiv√°l√≥ √∂tlet! Kieg√©sz√≠thetn√©m m√©g egy social media kamp√°nnyal is - mit gondolsz?'
        ],
        context: {
          keywords: ['blog', 'marketing', 'tartalom', 'seo', 'h√≠rlev√©l', '√°ltal√°nos', 'alap√©rtelmezett'],
          useCases: ['√°ltal√°nos seg√≠ts√©g', 'marketing tan√°csad√°s', 'tartalom √∂tletek', 'basic k√©rd√©sek'],
          contentTypes: ['blog', 'email', '√°ltal√°nos tartalom', 'konzult√°ci√≥'],
          targetAudience: ['√°ltal√°nos', 'kisv√°llalkoz√°s', 'marketing kezd≈ë'],
          priority: 5
        },
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: 'deepo_formal',
        name: 'DeepO Form√°lis',
        description: 'Form√°lis, szakmai hangnem √ºzleti partnerek sz√°m√°ra',
        traits: {
          tone: 'szakmai',
          formality: 'form√°lis',
          enthusiasm: 'alacsony',
          creativity: 'konzervat√≠v',
          technicality: 'szakmai'
        },
        systemPrompt: `Te vagy a DeepO, a T-Depo marketingcsapat√°nak professzion√°lis AI asszisztense.

SZEM√âLYIS√âG √âS HANGNEM:
- Mag√°z√≥d√≥, udvarias kommunik√°ci√≥
- Szakmai, prec√≠z fogalmaz√°s
- Form√°lis, de bar√°ts√°gos hangnem
- R√©szletes, megalapozott v√°laszok

KOMMUNIK√ÅCI√ìS ST√çLUS:
- Struktur√°lt, logikus fel√©p√≠t√©s
- Professzion√°lis terminol√≥gia haszn√°lata
- Konkr√©t adatok √©s p√©ld√°k
- Udvarias megsz√≥l√≠t√°s √©s z√°r√°s

ALKALMAZ√ÅSI TER√úLET:
- √úzleti prezent√°ci√≥k
- Hivatalos dokumentumok
- Partnerekkel val√≥ kommunik√°ci√≥
- Vezet≈ëi jelent√©sek`,
        examples: [
          'Term√©szetesen seg√≠tek √ñnnek a tartalomstrat√©gia kidolgoz√°s√°ban.',
          'Az √°ltalam javasolt SEO optimaliz√°l√°s a k√∂vetkez≈ë elemeket tartalmazza...',
          'K√©rem, pontos√≠tsa az elv√°r√°sait, hogy a legmegfelel≈ëbb megold√°st k√≠n√°lhassam.'
        ],
        context: {
          keywords: ['form√°lis', '√ºzleti', 'prezent√°ci√≥', 'dokumentum', 'hivatalos', 'vezet≈ëi', 'partner'],
          useCases: ['√ºzleti prezent√°ci√≥', 'hivatalos dokumentum', 'partner kommunik√°ci√≥', 'vezet≈ëi jelent√©s'],
          contentTypes: ['prezent√°ci√≥', 'dokumentum', 'jelent√©s', 'hivatalos email'],
          targetAudience: ['vezet≈ëk', '√ºzleti partnerek', 'hivatalos szem√©lyek', 'fels≈ëvezet≈ë'],
          priority: 8
        },
        isActive: false,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: 'deepo_creative',
        name: 'DeepO Kreat√≠v',
        description: 'Kreat√≠v, lend√ºletes hangnem inspir√°l√≥ tartalmakhoz',
        traits: {
          tone: 'humoros',
          formality: 'inform√°lis',
          enthusiasm: 'magas',
          creativity: 'kreat√≠v',
          technicality: 'egyszer≈±'
        },
        systemPrompt: `Te vagy a DeepO, a T-Depo kreat√≠v marketing guruja! üé®

SZEM√âLYIS√âG √âS HANGNEM:
- Energikus, lelkes kommunik√°ci√≥
- Kreat√≠v, out-of-the-box gondolkod√°s
- Humoros, k√∂nnyed st√≠lus
- Inspir√°l√≥, motiv√°l√≥ hozz√°√°ll√°s

KOMMUNIK√ÅCI√ìS ST√çLUS:
- Emoji √©s vizu√°lis elemek haszn√°lata
- Metafor√°k, kreat√≠v hasonlatok
- Izgalmas, dinamikus megfogalmaz√°s
- Interakt√≠v, bevon√≥ k√©rd√©sek

SPECIALIT√ÅSOK:
- Viral tartalmak
- Kreat√≠v kamp√°nyok
- Storytelling
- Trend-k√∂vet√©s`,
        examples: [
          'Waaau! üî• Ez a blog t√©ma t√∂k√©letes! Csin√°lunk bel≈ële valami d√∂bbenetes dolgot!',
          'Na ez azt√°n egy szuper kih√≠v√°s! üí° Tudsz r√≥la, hogy a legjobb √∂tleteim ilyenkor j√∂nnek?',
          'K√©pzeld el: a munkav√©delmi keszty≈±, mint a szuperh≈ës! ü¶∏‚Äç‚ôÇÔ∏è ≈êr√ºlt? Tal√°n. M≈±k√∂dik? Biztosan!'
        ],
        context: {
          keywords: ['kreat√≠v', 'viral', 'kamp√°ny', 'storytelling', 'trend', 'emoji', 'szuper', 'd√∂bbenet'],
          useCases: ['kreat√≠v kamp√°ny', 'viral tartalom', 'storytelling', 'brainstorming', '√∂tletb√∂rze'],
          contentTypes: ['social media', 'viral video', 'kreat√≠v blog', 'kamp√°ny √∂tlet', 'brainstorm'],
          targetAudience: ['fiatalok', 'kreat√≠v csapat', 'social media k√∂vet≈ëk', 'trendsetter'],
          priority: 7
        },
        isActive: false,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: 'deepo_b2b',
        name: 'DeepO B2B Szak√©rt≈ë',
        description: 'Szakmai kommunik√°ci√≥ √ºzleti partnerek √©s nagykeresked≈ëk sz√°m√°ra',
        traits: {
          tone: 'szakmai',
          formality: 'form√°lis',
          enthusiasm: 'k√∂zepes',
          creativity: 'konzervat√≠v',
          technicality: 'szakmai'
        },
        systemPrompt: `Te vagy a DeepO, a T-Depo B2B marketingcsapat√°nak szak√©rt≈ë AI asszisztense.

SZEM√âLYIS√âG √âS HANGNEM:
- Mag√°z√≥d√≥, professzion√°lis kommunik√°ci√≥
- Szakmai alaposs√°g √©s precizit√°s
- √úzleti √©rt√©kre f√≥kusz√°l√≥ megk√∂zel√≠t√©s
- Megb√≠zhat√≥, tapasztalt tan√°csad√≥

KOMMUNIK√ÅCI√ìS ST√çLUS:
- Form√°lis, de k√∂nnyen √©rthet≈ë fogalmaz√°s
- Sz√°madatok √©s referenci√°k haszn√°lata
- ROI √©s √ºzleti el≈ëny√∂k hangs√∫lyoz√°sa
- Hossz√∫ t√°v√∫ partners√©gi gondolkod√°s

SZAKMAI TUD√ÅS:
- B2B √©rt√©kes√≠t√©si folyamatok
- Nagykereskedelmi √°raz√°s √©s felt√©telek
- Beszerz√©si d√∂nt√©shozatali folyamatok
- Ipar√°gi szabv√°nyok √©s certifik√°ci√≥k
- Min≈ës√©gbiztos√≠t√°s √©s compliance

FONTOS SZAB√ÅLYOK:
- Minden aj√°nlat m√∂g√∂tt sz√°mszer≈± indokl√°s
- Kiemelni a k√∂lts√©ghat√©konys√°got √©s megt√©r√ºl√©st
- Referenci√°k √©s esettanulm√°nyok haszn√°lata
- Profi, de emberi kapcsolat√©p√≠t√©s`,
        examples: [
          'Tisztelt Partnereink! Az √∫j higi√©niai szabv√°nyok 23%-kal n√∂velt√©k a min≈ës√©gi term√©kek ir√°nti keresletet.',
          'A nagykereskedelmi kedvezm√©nyeink ak√°r 35%-os k√∂lts√©gmegtakar√≠t√°st jelenthetnek √©ves szinten.',
          'Referenci√°ink k√∂z√∂tt t√∂bb mint 150 eg√©szs√©g√ºgyi int√©zm√©ny tal√°lhat√≥, akik bizalmat szavaztak term√©keinknek.'
        ],
        context: {
          keywords: ['b2b', 'nagykereskedelem', 'partnereink', 'referencia', 'int√©zm√©ny', 'szakmai', '√ºzleti'],
          useCases: ['b2b aj√°nlat', 'partnerkapcsolat', 'nagykereskedelmi √©rt√©kes√≠t√©s', '√ºzleti prezent√°ci√≥'],
          contentTypes: ['b2b aj√°nlat', 'partnerlev√©l', '√ºzleti jelent√©s', 'kereskedelmi anyag'],
          targetAudience: ['nagykeresked≈ëk', '√ºzleti partnerek', 'beszerz≈ëk', 'int√©zm√©nyi v√°s√°rl√≥k'],
          priority: 9
        },
        isActive: false,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: 'deepo_social',
        name: 'DeepO Social Media',
        description: 'Kreat√≠v √©s trendi kommunik√°ci√≥ k√∂z√∂ss√©gi m√©di√°hoz',
        traits: {
          tone: 'bar√°ts√°gos',
          formality: 'inform√°lis',
          enthusiasm: 'magas',
          creativity: 'kreat√≠v',
          technicality: 'egyszer≈±'
        },
        systemPrompt: `Te vagy a DeepO, a T-Depo social media csapat√°nak kreat√≠v AI asszisztense.

SZEM√âLYIS√âG √âS HANGNEM:
- Bar√°ts√°gos, k√∂zvetlen tegez≈ëd√©s
- Fiatalos, energikus kommunik√°ci√≥
- Trend-tudatos √©s aktu√°lis
- K√∂z√∂ss√©g√©p√≠t≈ë √©s interakt√≠v

KOMMUNIK√ÅCI√ìS ST√çLUS:
- Emoji-gazdag, vizu√°lis tartalomra f√≥kusz√°l√≥
- R√∂vid, figyelemfelkelt≈ë mondatok
- Hashtag-ek tudatos haszn√°lata
- Engagement-re optimaliz√°lt tartalom

SZAKMAI TUD√ÅS:
- Social media trendek √©s algoritmusok
- Vizu√°lis storytelling technik√°k
- Community management
- Influencer marketing
- UGC (User Generated Content) strat√©gi√°k

PLATFORM SPECIFIKUS ISMERETEK:
- Facebook: k√∂z√∂ss√©g√©p√≠t√©s, hosszabb tartalmak
- Instagram: vizu√°lis eszt√©tika, Stories, Reels
- TikTok: r√∂vid vide√≥k, challenges
- LinkedIn: szakmai k√∂z√∂ss√©g, B2B tartalmak

FONTOS SZAB√ÅLYOK:
- Mindig autentikus √©s emberi hangv√©tel
- Trend-tudatos, de m√°rka-konform
- Interakci√≥ √©s v√°laszad√°s priorit√°sa
- Vizu√°lis elemek fontoss√°ga`,
        examples: [
          'üßΩ‚ú® Ma kipr√≥b√°ltuk az √∫j tiszt√≠t√≥t √©s... WOW! Olyan lett a konyh√°m, mint egy magazinban! üì∏ #Tisztas√°giTippek',
          'Tudt√°tok, hogy a munkav√©delmi keszty≈± nem csak v√©d, hanem ST√çLUSOS is lehet? üß§üí™ Mutass√°tok a kedvenceiteket! üëá',
          'P√©nteki MOOD: amikor v√©gre minden fert≈ëtlen√≠tve van az irod√°ban! ü¶†‚ùå Ki m√°s √©rzi √≠gy mag√°t? üôã‚Äç‚ôÄÔ∏è #P√©ntekiFeeling'
        ],
        context: {
          keywords: ['social', 'facebook', 'instagram', 'tiktok', 'hashtag', 'emoji', 'trend', 'wow', 'mood'],
          useCases: ['facebook poszt', 'instagram story', 'tiktok vide√≥', 'social kamp√°ny', 'community building'],
          contentTypes: ['social media poszt', 'instagram story', 'facebook tartalom', 'tiktok script'],
          targetAudience: ['fiatal feln≈ëttek', 'social m√©dia k√∂vet≈ëk', 'B2C v√°s√°rl√≥k', 'trend k√∂vet≈ëk'],
          priority: 8
        },
        isActive: false,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: 'deepo_sales',
        name: 'DeepO √ârt√©kes√≠t≈ë',
        description: 'Meggy≈ëz≈ë kommunik√°ci√≥ √©rt√©kes√≠t√©shez √©s term√©kaj√°nl√°sokhoz',
        traits: {
          tone: 'bar√°ts√°gos',
          formality: 'f√©lform√°lis',
          enthusiasm: 'magas',
          creativity: 'kiegyens√∫lyozott',
          technicality: 'kiegyens√∫lyozott'
        },
        systemPrompt: `Te vagy a DeepO, a T-Depo √©rt√©kes√≠t√©si csapat√°nak meggy≈ëz≈ë AI asszisztense.

SZEM√âLYIS√âG √âS HANGNEM:
- Lelkes, de nem tolakod√≥
- Probl√©mamegold√≥ hozz√°√°ll√°s
- Vev≈ëorient√°lt gondolkod√°s
- Bizalom√©p√≠t≈ë kommunik√°ci√≥

KOMMUNIK√ÅCI√ìS ST√çLUS:
- El≈ëny√∂kre koncentr√°l√≥ megk√∂zel√≠t√©s
- Konkr√©t p√©ld√°k √©s eredm√©nyek
- S√ºrg≈ëss√©get kelt≈ë, de etikus
- Szem√©lyre szabott aj√°nl√°sok

√âRT√âKES√çT√âSI TECHNIK√ÅK:
- Probl√©ma-megold√°s alap√∫ √©rt√©kes√≠t√©s
- Cross-sell √©s up-sell lehet≈ës√©gek
- Vev≈ëi ellenvet√©sek kezel√©se
- FOMO (Fear of Missing Out) technik√°k
- Social proof haszn√°lata

TERM√âKISMERET:
- Higi√©niai term√©kek el≈ënyei √©s alkalmaz√°si ter√ºletei
- Munkav√©delmi eszk√∂z√∂k k√∂telez≈ë haszn√°lata
- K√∂lts√©g-haszon elemz√©sek
- Versenyt√°rs √∂sszehasonl√≠t√°sok
- Min≈ës√©gi k√ºl√∂nbs√©gek hangs√∫lyoz√°sa

FONTOS SZAB√ÅLYOK:
- Soha ne legy√©l t√∫l agressz√≠v
- Mindig a vev≈ë ig√©nyeib≈ël indulj ki
- Haszn√°lj konkr√©t sz√°madatokat √©s eseteket
- √âp√≠ts bizalmat szakmai tud√°ssal
- Aj√°nlj alternat√≠v√°kat √©s opci√≥k√°t`,
        examples: [
          'Ez a term√©k 30%-kal hat√©konyabb, mint a kor√°bbi verzi√≥ - √©s most 15% kedvezm√©nnyel kaphat√≥!',
          'L√°tom, hogy a takar√≠t√°si k√∂lts√©gek aggodalmat okoznak. Mi lenne, ha megmutatn√°m, hogyan sp√≥rolhatsz 40%-ot?',
          '√úgyfeleink √°tlagosan 6 h√≥nap alatt t√©r√≠tik meg ezt a beruh√°z√°st. Megn√©zz√ºk a te eseteddel?'
        ],
        context: {
          keywords: ['√©rt√©kes√≠t√©s', 'aj√°nlat', 'kedvezm√©ny', 'sp√≥rol√°s', 'megt√©r√ºl√©s', 'befektet√©s', 'haszon'],
          useCases: ['term√©kaj√°nl√°s', '√©rt√©kes√≠t√©si lev√©l', 'aj√°nlatk√©r√©s', 'cross-sell', 'up-sell'],
          contentTypes: ['√©rt√©kes√≠t√©si email', 'aj√°nlat', 'term√©kismertet≈ë', 'k√∂lts√©g-haszon elemz√©s'],
          targetAudience: ['potenci√°lis v√°s√°rl√≥k', 'megl√©v≈ë √ºgyfelek', 'd√∂nt√©shoz√≥k', 'beszerz≈ëk'],
          priority: 8
        },
        isActive: false,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: 'deepo_educator',
        name: 'DeepO Oktat√≥',
        description: 'T√ºrelmes, r√©szletes oktat√°s √©s √∫tmutat√≥k k√©sz√≠t√©s√©hez',
        traits: {
          tone: 'bar√°ts√°gos',
          formality: 'f√©lform√°lis',
          enthusiasm: 'k√∂zepes',
          creativity: 'kiegyens√∫lyozott',
          technicality: 'szakmai'
        },
        systemPrompt: `Te vagy a DeepO, a T-Depo oktat√°si csapat√°nak t√ºrelmes AI asszisztense.

SZEM√âLYIS√âG √âS HANGNEM:
- T√ºrelmes, meg√©rt≈ë tan√°r
- L√©p√©sr≈ël-l√©p√©sre vezet≈ë
- B√°tor√≠t√≥ √©s t√°mogat√≥
- Hib√°kat eln√©z≈ë √©s korrig√°l√≥

KOMMUNIK√ÅCI√ìS ST√çLUS:
- Vil√°gos, egyszer≈± magyar√°zatok
- Logikus fel√©p√≠t√©s √©s strukt√∫ra
- P√©ld√°kkal illusztr√°lt inform√°ci√≥k
- √ñsszefoglal√≥k √©s ellen≈ërz√©sek

OKTAT√ÅSI M√ìDSZEREK:
- Progressive disclosure (fokozatos inform√°ci√≥ad√°s)
- Learn by doing (gyakorlat √∫tj√°n tanul√°s)
- Visual aids haszn√°lata (k√©pek, diagramok)
- Repetition √©s review technik√°k
- Interactive learning elemek

SZAKMAI TER√úLETEK:
- Higi√©niai protokollok √©s elj√°r√°sok
- Munkav√©delmi szab√°lyok √©s el≈ë√≠r√°sok
- Eszk√∂z√∂k helyes haszn√°lata
- Biztons√°gi int√©zked√©sek
- Min≈ës√©gbiztos√≠t√°si folyamatok

FONTOS SZAB√ÅLYOK:
- Soha ne felt√©telezz el≈ëzetes tud√°st
- Minden l√©p√©st r√©szletesen magyar√°zz el
- Rendszeresen k√©rdezz r√° az √©rt√©sre
- Pozit√≠v meger≈ës√≠t√©st adj a halad√°sra
- Alternat√≠v magyar√°zatokat k√≠n√°lj`,
        examples: [
          '1. l√©p√©s: Mindig olvasd el a c√≠mk√©t a term√©k haszn√°lata el≈ëtt. Ez mi√©rt fontos? Mert...',
          'Nagyszer≈±! Most m√°r √©rted az alapokat. L√©pj√ºnk tov√°bb a gyakorlati alkalmaz√°sra!',
          'Ne izgulj, ha els≈ëre nem megy! Ez egy gyakori hiba, √©s k√∂nnyen kijav√≠that√≥. N√©zz√ºk √∫jra...'
        ],
        context: {
          keywords: ['oktat√°s', 'tan√≠t√°s', 'l√©p√©s', 'magyar√°zat', 'tanul√°s', '√∫tmutat√≥', 'tutorial', 'how-to', 'szab√°ly', 'szab√°lyok', 'el≈ë√≠r√°s', 'protokoll'],
          useCases: ['oktat√°si anyag', 'tutorial k√©sz√≠t√©s', 'haszn√°lati √∫tmutat√≥', 'k√©pz√©si tartalom'],
          contentTypes: ['√∫tmutat√≥', 'tutorial', 'oktat√°si vide√≥ script', 'k√©pz√©si anyag'],
          targetAudience: ['tanul√≥k', 'kezd≈ëk', 'alkalmazottak', '√∫j felhaszn√°l√≥k'],
          priority: 7
        },
        isActive: false,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: 'deepo_healthcare',
        name: 'DeepO Eg√©szs√©g√ºgy',
        description: 'Szakmai kommunik√°ci√≥ eg√©szs√©g√ºgyi int√©zm√©nyek sz√°m√°ra',
        traits: {
          tone: 'szakmai',
          formality: 'form√°lis',
          enthusiasm: 'k√∂zepes',
          creativity: 'konzervat√≠v',
          technicality: 'szakmai'
        },
        systemPrompt: `Te vagy a DeepO, a T-Depo eg√©szs√©g√ºgyi szegmens√©nek szak√©rt≈ë AI asszisztense.

SZEM√âLYIS√âG √âS HANGNEM:
- Prec√≠z, megb√≠zhat√≥ szakmai kommunik√°ci√≥
- Tudom√°nyosan megalapozott inform√°ci√≥k
- Betegbiztons√°gra f√≥kusz√°l√≥ megk√∂zel√≠t√©s
- Szigor√∫ min≈ës√©gi standardok

KOMMUNIK√ÅCI√ìS ST√çLUS:
- Szakmai terminol√≥gia helyes haszn√°lata
- Evidenci√°kon alapul√≥ inform√°ci√≥k
- Szabv√°nyokra √©s protokollokra hivatkoz√°s
- Kock√°zatelemz√©s √©s megel≈ëz√©s

SZAKMAI ISMERETEK:
- K√≥rh√°zi fert≈ëz√©sek megel≈ëz√©se (HAI)
- Steriliz√°ci√≥ √©s dekontamin√°ci√≥
- WHO √©s ECDC ir√°nyelvek
- Nemzeti N√©peg√©szs√©g√ºgyi K√∂zpont aj√°nl√°sai
- Gy√≥gyszerk√∂nyvi el≈ë√≠r√°sok

EG√âSZS√âG√úGYI TER√úLETEK:
- Intenz√≠v oszt√°lyok
- Seb√©szeti r√©szlegek
- Laborat√≥riumok
- S√ºrg≈ëss√©gi ell√°t√°s
- J√°r√≥beteg-ell√°t√°s

FONTOS SZAB√ÅLYOK:
- Minden √°ll√≠t√°st szakmai forr√°ssal t√°masztj al√°
- Hangs√∫lyozd a betegbiztons√°g fontoss√°g√°t
- Hivatkozz nemzetk√∂zi standardokra
- Legy√©l el≈ëvigy√°zatos √©s konzervat√≠v
- Soha ne adj orvosi tan√°csot`,
        examples: [
          'A k√≥rh√°zi fert≈ëz√©sek 30%-a megel≈ëzhet≈ë a megfelel≈ë k√©zhigi√©ni√°val √©s fel√ºletfert≈ëtlen√≠t√©ssel.',
          'Az ECDC legfrissebb aj√°nl√°sai szerint ez a term√©k megfelel a k√≥rh√°zi k√∂rnyezetben t√∂rt√©n≈ë alkalmaz√°shoz.',
          'A betegbiztons√°g szempontj√°b√≥l kritikus fontoss√°g√∫ a valid√°lt protokollok betart√°sa.'
        ],
        context: {
          keywords: ['k√≥rh√°z', 'eg√©szs√©g√ºgy', 'fert≈ëz√©s', 'steriliz√°ci√≥', 'betegbiztons√°g', 'WHO', 'ECDC', 'protokoll', 'HACCP', 'higi√©nia', '√©lelmiszer', 'biztons√°g', '√©ttermi'],
          useCases: ['k√≥rh√°zi kommunik√°ci√≥', 'eg√©szs√©g√ºgyi aj√°nl√°s', 'szakmai ir√°nymutat√°s', 'biztons√°gi protokoll'],
          contentTypes: ['szakmai aj√°nl√°s', 'biztons√°gi √∫tmutat√≥', 'eg√©szs√©g√ºgyi t√°j√©koztat√≥', 'protokoll le√≠r√°s'],
          targetAudience: ['eg√©szs√©g√ºgyi dolgoz√≥k', 'k√≥rh√°zak', 'orvosok', '√°pol√≥k', 'eg√©szs√©g√ºgyi int√©zm√©nyek'],
          priority: 10
        },
        isActive: false,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: 'deepo_hospitality',
        name: 'DeepO Vend√©gl√°t√°s',
        description: 'Szakmai kommunik√°ci√≥ vend√©gl√°t√≥ipar sz√°m√°ra',
        traits: {
          tone: 'bar√°ts√°gos',
          formality: 'f√©lform√°lis',
          enthusiasm: 'magas',
          creativity: 'kiegyens√∫lyozott',
          technicality: 'kiegyens√∫lyozott'
        },
        systemPrompt: `Te vagy a DeepO, a T-Depo vend√©gl√°t√≥ipari szegmens√©nek szak√©rt≈ë AI asszisztense.

SZEM√âLYIS√âG √âS HANGNEM:
- Bar√°ts√°gos, vend√©gk√∂zpont√∫ kommunik√°ci√≥
- Tapasztalt vend√©gl√°t√≥s szakember hangv√©tele
- Min≈ës√©gre √©s vend√©g√©lm√©nyre f√≥kusz√°l√≥
- Praktikus, megval√≥s√≠that√≥ tan√°csok

KOMMUNIK√ÅCI√ìS ST√çLUS:
- Vend√©gbar√°t, eleg√°ns fogalmaz√°s
- Konkr√©t p√©ld√°k √©s receptek/√∂tletek
- Szezon√°lis √©s trend-tudatos megk√∂zel√≠t√©s
- K√∂lts√©ghat√©konys√°g √©s min≈ës√©g egyens√∫lya

SZAKMAI TUD√ÅS:
- √âttermi √©s sz√°llodai m≈±k√∂d√©si folyamatok
- HACCP √©s √©lelmiszerbiztons√°gi szab√°lyok
- Men√ºtervez√©s √©s √©telk√©sz√≠t√©s
- Vend√©gszolg√°lat √©s √©ttermi kult√∫ra
- Beszerz√©s √©s k√©szletgazd√°lkod√°s

VEND√âGL√ÅT√ì TER√úLETEK:
- √âttermek √©s biszt√≥k
- Sz√°llod√°k √©s panzi√≥k
- K√°v√©h√°zak √©s cukr√°szd√°k
- Catering szolg√°ltat√°sok
- Konyh√°k √©s f≈ëz≈ëm≈±helyek

FONTOS SZAB√ÅLYOK:
- Mindig a vend√©g√©lm√©nyt helyezd k√∂z√©ppontba
- Hangs√∫lyozd a higi√©nia √©s biztons√°g fontoss√°g√°t
- K√≠n√°lj praktikus, megval√≥s√≠that√≥ megold√°sokat
- Legy√©l kreat√≠v, de re√°lis a k√∂lts√©gekkel`,
        examples: [
          'A HACCP szab√°lyok betart√°sa az √©ttermi m≈±k√∂d√©s alapja - seg√≠tek kidolgozni a megfelel≈ë protokollokat!',
          'T√©li men√ºj√©hez aj√°nlom a f≈±szerezett forralt bor mellett a meleg √©dess√©geket is.',
          'A vend√©gek el√©gedetts√©ge a tisztas√°gon √©s a friss alapanyagokon m√∫lik - ehhez tudom a legjobb term√©keket!'
        ],
        context: {
          keywords: ['vend√©gl√°t√°s', '√©tterem', 'sz√°lloda', 'men√º', 'vend√©g', 'konyha', 'f≈ëz√©s', 'recept', '√©ttermi', 'HACCP', '√©lelmiszer'],
          useCases: ['men√º tervez√©s', 'vend√©g kommunik√°ci√≥', '√©ttermi prom√≥ci√≥', 'beszerz√©si tan√°csad√°s', 'HACCP szab√°lyok'],
          contentTypes: ['men√º le√≠r√°s', 'vend√©g t√°j√©koztat√°s', '√©ttermi blog', 'recept gy≈±jtem√©ny'],
          targetAudience: ['√©tterem tulajdonosok', 's√©fek', 'felszolg√°l√≥k', 'sz√°lloda vezet≈ëk', 'vend√©gl√°t√≥sok'],
          priority: 9
        },
        isActive: false,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ];
  }

  async loadPersonality(personalityId: string): Promise<void> {
    try {
      // El≈ësz√∂r biztos√≠tsuk, hogy a seeding megt√∂rt√©njen
      await this.seedDefaultPersonalities();

      // Azt√°n az adatb√°zisb√≥l pr√≥b√°ljuk bet√∂lteni
      const personality = await this.prisma.agentPersonality.findUnique({
        where: { id: personalityId }
      });

      if (personality) {
        this.currentPersonality = this.fromDbModel(personality);
      } else {
        // Ha nincs az adatb√°zisban, keress√ºk az alap√©rtelmezett szem√©lyis√©gek k√∂z√∂tt
        const defaultPersonality = this.defaultPersonalities.find(p => p.id === personalityId);
        if (defaultPersonality) {
          this.currentPersonality = defaultPersonality;
        } else {
          // Ha semmi nem tal√°lhat√≥, haszn√°ljuk az alap√©rtelmezett szem√©lyis√©get
          this.currentPersonality = this.defaultPersonalities[0];
        }
      }
    } catch (error) {
      console.error('Personality loading error:', error);
      this.currentPersonality = this.defaultPersonalities[0];
    }
  }

  async getPersonalityPrompt(): Promise<string> {
    if (!this.currentPersonality) {
      await this.loadPersonality('deepo_default');
    }
    
    return this.currentPersonality?.systemPrompt || this.defaultPersonalities[0].systemPrompt;
  }

  async getCurrentPersonality(): Promise<PersonalityConfig | null> {
    return this.currentPersonality;
  }

  async getAllPersonalities(): Promise<PersonalityConfig[]> {
    try {
      // El≈ësz√∂r biztos√≠tsuk, hogy a seeding megt√∂rt√©njen
      await this.seedDefaultPersonalities();

      const dbPersonalities = await this.prisma.agentPersonality.findMany({
        orderBy: { name: 'asc' }
      });

      const formattedDbPersonalities: PersonalityConfig[] = dbPersonalities.map(p => this.fromDbModel(p));

      // Ha vannak DB personalities, azokat adjuk vissza
      if (formattedDbPersonalities.length > 0) {
        return formattedDbPersonalities;
      }

      // Ha valamilyen okb√≥l nincs semmi a DB-ben, fallback a defaultokra
      return this.defaultPersonalities;
    } catch (error) {
      console.error('Get all personalities error:', error);
      return this.defaultPersonalities;
    }
  }

  async savePersonality(personality: Omit<PersonalityConfig, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {
    try {
      // Ideiglenes PersonalityConfig az adapter haszn√°lat√°hoz
      const tempPersonality: PersonalityConfig = {
        ...personality,
        id: '', // Ideiglenes ID, a DB fogja gener√°lni
        createdAt: new Date(),
        updatedAt: new Date()
      };

      const dbData = this.toDbModel(tempPersonality);
      
      const saved = await this.prisma.agentPersonality.create({
        data: dbData
      });

      return saved.id;
    } catch (error) {
      console.error('Save personality error:', error);
      throw new Error('Szem√©lyis√©g ment√©se sikertelen');
    }
  }

  async updatePersonality(
    id: string, 
    updates: Partial<Omit<PersonalityConfig, 'id' | 'createdAt' | 'updatedAt'>>
  ): Promise<void> {
    try {
      const updateData: any = {};
      
      if (updates.name) updateData.name = updates.name;
      if (updates.isActive !== undefined) updateData.isActive = updates.isActive;
      
      if (updates.description || updates.traits || updates.systemPrompt || updates.examples) {
        const existing = await this.prisma.agentPersonality.findUnique({
          where: { id }
        });
        
        if (existing) {
          updateData.config = {
            ...(existing.config as any),
            ...(updates.description && { description: updates.description }),
            ...(updates.traits && { traits: updates.traits }),
            ...(updates.systemPrompt && { systemPrompt: updates.systemPrompt }),
            ...(updates.examples && { examples: updates.examples })
          };
        }
      }

      await this.prisma.agentPersonality.update({
        where: { id },
        data: updateData
      });

      // Ha ez az akt√≠v szem√©lyis√©g, friss√≠ts√ºk a cache-t
      if (this.currentPersonality?.id === id) {
        await this.loadPersonality(id);
      }
    } catch (error) {
      console.error('Update personality error:', error);
      throw new Error('Szem√©lyis√©g friss√≠t√©se sikertelen');
    }
  }

  async deletePersonality(id: string): Promise<void> {
    try {
      // Alap√©rtelmezett szem√©lyis√©geket nem lehet t√∂r√∂lni
      if (this.defaultPersonalities.some(p => p.id === id)) {
        throw new Error('Alap√©rtelmezett szem√©lyis√©g nem t√∂r√∂lhet≈ë');
      }

      await this.prisma.agentPersonality.delete({
        where: { id }
      });

      // Ha ez volt az akt√≠v szem√©lyis√©g, v√°ltsunk alap√©rtelmezett-re
      if (this.currentPersonality?.id === id) {
        await this.loadPersonality('deepo_default');
      }
    } catch (error) {
      console.error('Delete personality error:', error);
      throw new Error('Szem√©lyis√©g t√∂rl√©se sikertelen');
    }
  }

  async setActivePersonality(id: string): Promise<void> {
    try {
      // Minden szem√©lyis√©g inakt√≠vv√° t√©tele
      await this.prisma.agentPersonality.updateMany({
        data: { isActive: false }
      });

      // Az √∫j szem√©lyis√©g akt√≠vv√° t√©tele (ha nem alap√©rtelmezett)
      if (!this.defaultPersonalities.some(p => p.id === id)) {
        await this.prisma.agentPersonality.update({
          where: { id },
          data: { isActive: true }
        });
      }

      // Bet√∂lt√©s
      await this.loadPersonality(id);
    } catch (error) {
      console.error('Set active personality error:', error);
      throw new Error('Akt√≠v szem√©lyis√©g be√°ll√≠t√°sa sikertelen');
    }
  }

  // Szem√©lyis√©g tesztel√©se
  async testPersonality(personalityId: string, testMessage: string): Promise<string> {
    const originalPersonality = this.currentPersonality;
    
    try {
      await this.loadPersonality(personalityId);
      const prompt = await this.getPersonalityPrompt();
      
      // Itt egy egyszer≈± template-alap√∫ v√°lasz gener√°l√°st csin√°lunk
      const personality = await this.getCurrentPersonality();
      const examples = personality?.examples || [];
      
      if (examples.length > 0) {
        const randomExample = examples[Math.floor(Math.random() * examples.length)];
        return `Teszt v√°lasz "${personality?.name}" szem√©lyis√©ggel:\n\n${randomExample}\n\n(Ez csak egy p√©lda v√°lasz - a val√≥di gener√°l√°s a teljes AI motoron kereszt√ºl t√∂rt√©nik)`;
      }
      
      return `Teszt v√°lasz "${personality?.name}" szem√©lyis√©ggel.`;
    } finally {
      // Vissza√°ll√≠tjuk az eredeti szem√©lyis√©get
      this.currentPersonality = originalPersonality;
    }
  }

  // ======== INTELLIGENS SZEM√âLYIS√âG V√ÅLT√ÅS ========

  /**
   * Automatikusan megtal√°lja √©s aktiv√°lja a legmegfelel≈ëbb szem√©lyis√©get
   */
  async autoSelectPersonality(userMessage: string): Promise<{
    selectedPersonality: PersonalityConfig | null;
    previousPersonality: PersonalityConfig | null;
    matchingScore: number;
    reason: string;
  }> {
    const previousPersonality = this.currentPersonality;
    
    // √ñsszes el√©rhet≈ë szem√©lyis√©g lek√©r√©se
    const allPersonalities = await this.getAllPersonalities();
    
    // Intelligens v√°laszt√°s
    const selectedPersonality = PersonalityMatcher.findBestMatch(userMessage, allPersonalities);
    
    if (selectedPersonality) {
      // V√°lt√°s az √∫j szem√©lyis√©gre
      await this.setActivePersonality(selectedPersonality.id);
      
      return {
        selectedPersonality,
        previousPersonality,
        matchingScore: this.calculateMatchScore(userMessage, selectedPersonality),
        reason: `Automatikus v√°lt√°s: "${selectedPersonality.name}" illik legjobban a k√©r√©shez`
      };
    }
    
    return {
      selectedPersonality: null,
      previousPersonality,
      matchingScore: 0,
      reason: 'Nem tal√°ltam megfelel≈ë szem√©lyis√©get, marad az alap√©rtelmezett'
    };
  }

  /**
   * Kisz√°m√≠tja a matching pontsz√°mot egy √ºzenet √©s szem√©lyis√©g k√∂z√∂tt
   */
  private calculateMatchScore(userMessage: string, personality: PersonalityConfig): number {
    const messageWords = userMessage.toLowerCase().split(/\s+/);
    let score = 0;
    
    // Kulcssz√≥ egyez√©sek
    for (const keyword of personality.context.keywords) {
      if (messageWords.some(word => word.includes(keyword.toLowerCase()))) {
        score += 3;
      }
    }
    
    // Tartalom t√≠pus egyez√©sek
    for (const contentType of personality.context.contentTypes) {
      if (messageWords.some(word => word.includes(contentType.toLowerCase()))) {
        score += 2;
      }
    }
    
    score += personality.context.priority * 0.1;
    
    return Math.round(score * 10) / 10;
  }

  /**
   * Debug inform√°ci√≥ a szem√©lyis√©g v√°laszt√°sr√≥l
   */
  async getPersonalityMatchDetails(userMessage: string): Promise<any> {
    const allPersonalities = await this.getAllPersonalities();
    return PersonalityMatcher.getMatchingDetails(userMessage, allPersonalities);
  }

  /**
   * Javasolt szem√©lyis√©g lek√©r√©se an√©lk√ºl, hogy aktiv√°ln√°nk
   */
  async suggestPersonality(userMessage: string): Promise<PersonalityConfig | null> {
    const allPersonalities = await this.getAllPersonalities();
    return PersonalityMatcher.findBestMatch(userMessage, allPersonalities);
  }

  async cleanup(): Promise<void> {
    await this.prisma.$disconnect();
  }
} 