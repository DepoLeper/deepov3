import { PrismaClient } from '@prisma/client';

export interface PersonalityTraits {
  tone: 'k√∂zvetlen' | 'szakmai' | 'humoros' | 'bar√°ts√°gos' | 'mag√°z√≥d√≥';
  formality: 'inform√°lis' | 'f√©lform√°lis' | 'form√°lis';
  enthusiasm: 'alacsony' | 'k√∂zepes' | 'magas';
  creativity: 'konzervat√≠v' | 'kiegyens√∫lyozott' | 'kreat√≠v';
  technicality: 'egyszer≈±' | 'kiegyens√∫lyozott' | 'szakmai';
}

export interface PersonalityConfig {
  id: string;
  name: string;
  description: string;
  traits: PersonalityTraits;
  systemPrompt: string;
  examples: string[];
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export class PersonalityEngine {
  private prisma: PrismaClient;
  private currentPersonality: PersonalityConfig | null = null;
  private defaultPersonalities: PersonalityConfig[] = [];

  constructor(personalityId?: string) {
    this.prisma = new PrismaClient();
    this.initializeDefaultPersonalities();
    if (personalityId) {
      this.loadPersonality(personalityId);
    }
  }

  private initializeDefaultPersonalities(): void {
    this.defaultPersonalities = [
      {
        id: 'deepo_default',
        name: 'DeepO Alap√©rtelmezett',
        description: 'A DeepO alap√©rtelmezett szem√©lyis√©ge - k√∂zvetlen, szak√©rt≈ë, seg√≠t≈ëk√©sz',
        traits: {
          tone: 'k√∂zvetlen',
          formality: 'f√©lform√°lis',
          enthusiasm: 'k√∂zepes',
          creativity: 'kiegyens√∫lyozott',
          technicality: 'kiegyens√∫lyozott'
        },
        systemPrompt: `Te vagy a DeepO, a T-Depo marketingcsapat√°nak intelligens AI asszisztense. 

SZEM√âLYIS√âG √âS HANGNEM:
- K√∂zvetlen, de seg√≠t≈ëk√©sz hangnem
- Tegez≈ëd√©s, de szakmai korrekts√©g
- Pozit√≠v, lelkes hozz√°√°ll√°s
- Gyakorlati, megval√≥s√≠that√≥ tan√°csok
- Kreat√≠v, de megalapozott √∂tletek

KOMMUNIK√ÅCI√ìS ST√çLUS:
- R√∂vid, t√∂m√∂r v√°laszok
- Konkr√©t p√©ld√°k √©s javaslatok
- Emoji haszn√°lata m√©rt√©kkel (üòä, üí°, üöÄ)
- K√©rd√©sek feltev√©se a pontosabb seg√≠ts√©g √©rdek√©ben

SZAKMAI TUD√ÅS:
- Marketing √©s tartalomk√©sz√≠t√©s specialista
- SEO √©s web√°ruh√°z optimaliz√°l√°s
- B2B kommunik√°ci√≥
- Higi√©niai √©s munkav√©delmi term√©kek ismerete

FONTOS SZAB√ÅLYOK:
- Mindig eml√©kezz√©l a kor√°bbi besz√©lget√©sekre
- K√©rdezz vissza, ha b√°rmiben bizonytalan vagy
- Haszn√°ld fel a rendelkez√©sre √°ll√≥ √∫tmutat√≥kat
- Legy√©l proakt√≠v √©s javaslj tov√°bbi l√©p√©seket`,
        examples: [
          'Szuper! Egy SEO-optimaliz√°lt blog cikket szeretn√©l √≠rni? üöÄ Milyen t√©m√°ban gondolkodsz?',
          '√ârtem, hogy a h√≠rleveled hangneme t√∫l sz√°raz. Pr√≥b√°ljuk meg humoros elemekkel f≈±szerezni! üòä',
          'Ez egy kiv√°l√≥ √∂tlet! Kieg√©sz√≠thetn√©m m√©g egy social media kamp√°nnyal is - mit gondolsz?'
        ],
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: 'deepo_formal',
        name: 'DeepO Form√°lis',
        description: 'Form√°lis, szakmai hangnem √ºzleti partnerek sz√°m√°ra',
        traits: {
          tone: 'szakmai',
          formality: 'form√°lis',
          enthusiasm: 'alacsony',
          creativity: 'konzervat√≠v',
          technicality: 'szakmai'
        },
        systemPrompt: `Te vagy a DeepO, a T-Depo marketingcsapat√°nak professzion√°lis AI asszisztense.

SZEM√âLYIS√âG √âS HANGNEM:
- Mag√°z√≥d√≥, udvarias kommunik√°ci√≥
- Szakmai, prec√≠z fogalmaz√°s
- Form√°lis, de bar√°ts√°gos hangnem
- R√©szletes, megalapozott v√°laszok

KOMMUNIK√ÅCI√ìS ST√çLUS:
- Struktur√°lt, logikus fel√©p√≠t√©s
- Professzion√°lis terminol√≥gia haszn√°lata
- Konkr√©t adatok √©s p√©ld√°k
- Udvarias megsz√≥l√≠t√°s √©s z√°r√°s

ALKALMAZ√ÅSI TER√úLET:
- √úzleti prezent√°ci√≥k
- Hivatalos dokumentumok
- Partnerekkel val√≥ kommunik√°ci√≥
- Vezet≈ëi jelent√©sek`,
        examples: [
          'Term√©szetesen seg√≠tek √ñnnek a tartalomstrat√©gia kidolgoz√°s√°ban.',
          'Az √°ltalam javasolt SEO optimaliz√°l√°s a k√∂vetkez≈ë elemeket tartalmazza...',
          'K√©rem, pontos√≠tsa az elv√°r√°sait, hogy a legmegfelel≈ëbb megold√°st k√≠n√°lhassam.'
        ],
        isActive: false,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: 'deepo_creative',
        name: 'DeepO Kreat√≠v',
        description: 'Kreat√≠v, lend√ºletes hangnem inspir√°l√≥ tartalmakhoz',
        traits: {
          tone: 'humoros',
          formality: 'inform√°lis',
          enthusiasm: 'magas',
          creativity: 'kreat√≠v',
          technicality: 'egyszer≈±'
        },
        systemPrompt: `Te vagy a DeepO, a T-Depo kreat√≠v marketing guruja! üé®

SZEM√âLYIS√âG √âS HANGNEM:
- Energikus, lelkes kommunik√°ci√≥
- Kreat√≠v, out-of-the-box gondolkod√°s
- Humoros, k√∂nnyed st√≠lus
- Inspir√°l√≥, motiv√°l√≥ hozz√°√°ll√°s

KOMMUNIK√ÅCI√ìS ST√çLUS:
- Emoji √©s vizu√°lis elemek haszn√°lata
- Metafor√°k, kreat√≠v hasonlatok
- Izgalmas, dinamikus megfogalmaz√°s
- Interakt√≠v, bevon√≥ k√©rd√©sek

SPECIALIT√ÅSOK:
- Viral tartalmak
- Kreat√≠v kamp√°nyok
- Storytelling
- Trend-k√∂vet√©s`,
        examples: [
          'Waaau! üî• Ez a blog t√©ma t√∂k√©letes! Csin√°lunk bel≈ële valami d√∂bbenetes dolgot!',
          'Na ez azt√°n egy szuper kih√≠v√°s! üí° Tudsz r√≥la, hogy a legjobb √∂tleteim ilyenkor j√∂nnek?',
          'K√©pzeld el: a munkav√©delmi keszty≈±, mint a szuperh≈ës! ü¶∏‚Äç‚ôÇÔ∏è ≈êr√ºlt? Tal√°n. M≈±k√∂dik? Biztosan!'
        ],
        isActive: false,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ];
  }

  async loadPersonality(personalityId: string): Promise<void> {
    try {
      // El≈ësz√∂r az adatb√°zisb√≥l pr√≥b√°ljuk bet√∂lteni
      const personality = await this.prisma.agentPersonality.findUnique({
        where: { id: personalityId }
      });

      if (personality) {
        this.currentPersonality = {
          id: personality.id,
          name: personality.name,
          description: '',
          traits: personality.config.traits as PersonalityTraits,
          systemPrompt: personality.config.systemPrompt as string,
          examples: personality.config.examples as string[],
          isActive: personality.isActive,
          createdAt: personality.createdAt,
          updatedAt: personality.updatedAt
        };
      } else {
        // Ha nincs az adatb√°zisban, keress√ºk az alap√©rtelmezett szem√©lyis√©gek k√∂z√∂tt
        const defaultPersonality = this.defaultPersonalities.find(p => p.id === personalityId);
        if (defaultPersonality) {
          this.currentPersonality = defaultPersonality;
        } else {
          // Ha semmi nem tal√°lhat√≥, haszn√°ljuk az alap√©rtelmezett szem√©lyis√©get
          this.currentPersonality = this.defaultPersonalities[0];
        }
      }
    } catch (error) {
      console.error('Personality loading error:', error);
      this.currentPersonality = this.defaultPersonalities[0];
    }
  }

  async getPersonalityPrompt(): Promise<string> {
    if (!this.currentPersonality) {
      await this.loadPersonality('deepo_default');
    }
    
    return this.currentPersonality?.systemPrompt || this.defaultPersonalities[0].systemPrompt;
  }

  async getCurrentPersonality(): Promise<PersonalityConfig | null> {
    return this.currentPersonality;
  }

  async getAllPersonalities(): Promise<PersonalityConfig[]> {
    try {
      const dbPersonalities = await this.prisma.agentPersonality.findMany({
        orderBy: { name: 'asc' }
      });

      const formattedDbPersonalities: PersonalityConfig[] = dbPersonalities.map(p => ({
        id: p.id,
        name: p.name,
        description: p.config.description as string || '',
        traits: p.config.traits as PersonalityTraits,
        systemPrompt: p.config.systemPrompt as string,
        examples: p.config.examples as string[],
        isActive: p.isActive,
        createdAt: p.createdAt,
        updatedAt: p.updatedAt
      }));

      return [...this.defaultPersonalities, ...formattedDbPersonalities];
    } catch (error) {
      console.error('Get all personalities error:', error);
      return this.defaultPersonalities;
    }
  }

  async savePersonality(personality: Omit<PersonalityConfig, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {
    try {
      const saved = await this.prisma.agentPersonality.create({
        data: {
          name: personality.name,
          config: {
            description: personality.description,
            traits: personality.traits,
            systemPrompt: personality.systemPrompt,
            examples: personality.examples
          },
          isActive: personality.isActive
        }
      });

      return saved.id;
    } catch (error) {
      console.error('Save personality error:', error);
      throw new Error('Szem√©lyis√©g ment√©se sikertelen');
    }
  }

  async updatePersonality(
    id: string, 
    updates: Partial<Omit<PersonalityConfig, 'id' | 'createdAt' | 'updatedAt'>>
  ): Promise<void> {
    try {
      const updateData: any = {};
      
      if (updates.name) updateData.name = updates.name;
      if (updates.isActive !== undefined) updateData.isActive = updates.isActive;
      
      if (updates.description || updates.traits || updates.systemPrompt || updates.examples) {
        const existing = await this.prisma.agentPersonality.findUnique({
          where: { id }
        });
        
        if (existing) {
          updateData.config = {
            ...(existing.config as any),
            ...(updates.description && { description: updates.description }),
            ...(updates.traits && { traits: updates.traits }),
            ...(updates.systemPrompt && { systemPrompt: updates.systemPrompt }),
            ...(updates.examples && { examples: updates.examples })
          };
        }
      }

      await this.prisma.agentPersonality.update({
        where: { id },
        data: updateData
      });

      // Ha ez az akt√≠v szem√©lyis√©g, friss√≠ts√ºk a cache-t
      if (this.currentPersonality?.id === id) {
        await this.loadPersonality(id);
      }
    } catch (error) {
      console.error('Update personality error:', error);
      throw new Error('Szem√©lyis√©g friss√≠t√©se sikertelen');
    }
  }

  async deletePersonality(id: string): Promise<void> {
    try {
      // Alap√©rtelmezett szem√©lyis√©geket nem lehet t√∂r√∂lni
      if (this.defaultPersonalities.some(p => p.id === id)) {
        throw new Error('Alap√©rtelmezett szem√©lyis√©g nem t√∂r√∂lhet≈ë');
      }

      await this.prisma.agentPersonality.delete({
        where: { id }
      });

      // Ha ez volt az akt√≠v szem√©lyis√©g, v√°ltsunk alap√©rtelmezett-re
      if (this.currentPersonality?.id === id) {
        await this.loadPersonality('deepo_default');
      }
    } catch (error) {
      console.error('Delete personality error:', error);
      throw new Error('Szem√©lyis√©g t√∂rl√©se sikertelen');
    }
  }

  async setActivePersonality(id: string): Promise<void> {
    try {
      // Minden szem√©lyis√©g inakt√≠vv√° t√©tele
      await this.prisma.agentPersonality.updateMany({
        data: { isActive: false }
      });

      // Az √∫j szem√©lyis√©g akt√≠vv√° t√©tele (ha nem alap√©rtelmezett)
      if (!this.defaultPersonalities.some(p => p.id === id)) {
        await this.prisma.agentPersonality.update({
          where: { id },
          data: { isActive: true }
        });
      }

      // Bet√∂lt√©s
      await this.loadPersonality(id);
    } catch (error) {
      console.error('Set active personality error:', error);
      throw new Error('Akt√≠v szem√©lyis√©g be√°ll√≠t√°sa sikertelen');
    }
  }

  // Szem√©lyis√©g tesztel√©se
  async testPersonality(personalityId: string, testMessage: string): Promise<string> {
    const originalPersonality = this.currentPersonality;
    
    try {
      await this.loadPersonality(personalityId);
      const prompt = await this.getPersonalityPrompt();
      
      // Itt egy egyszer≈± template-alap√∫ v√°lasz gener√°l√°st csin√°lunk
      const personality = await this.getCurrentPersonality();
      const examples = personality?.examples || [];
      
      if (examples.length > 0) {
        const randomExample = examples[Math.floor(Math.random() * examples.length)];
        return `Teszt v√°lasz "${personality?.name}" szem√©lyis√©ggel:\n\n${randomExample}\n\n(Ez csak egy p√©lda v√°lasz - a val√≥di gener√°l√°s a teljes AI motoron kereszt√ºl t√∂rt√©nik)`;
      }
      
      return `Teszt v√°lasz "${personality?.name}" szem√©lyis√©ggel.`;
    } finally {
      // Vissza√°ll√≠tjuk az eredeti szem√©lyis√©get
      this.currentPersonality = originalPersonality;
    }
  }

  async cleanup(): Promise<void> {
    await this.prisma.$disconnect();
  }
} 