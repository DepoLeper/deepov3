import { NextRequest, NextResponse } from 'next/server';
import { UnasApiClient } from '@/lib/unas/UnasApiClient';

export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const productId = searchParams.get('id');
  
  console.log('üß™ === UNAS API TESZT IND√çT√ÅSA ===');
  console.log(`üéØ C√©l: ${productId || 'lista'} term√©k r√©szletes vizsg√°lata`);
  
  try {
    // API kulcs ellen≈ërz√©se
    const apiKey = process.env.UNAS_API_KEY;
    if (!apiKey) {
      return NextResponse.json({
        success: false,
        error: 'UNAS_API_KEY nincs be√°ll√≠tva a k√∂rnyezeti v√°ltoz√≥kban',
        help: '√Åll√≠tsd be az UNAS_API_KEY-t a .env.local f√°jlban'
      }, { status: 500 });
    }

    console.log(`üîë API kulcs: ${apiKey.substring(0, 10)}...${apiKey.slice(-10)}`);
    console.log('üöÄ UnasApiClient inicializ√°lva');
    
    const unasClient = new UnasApiClient({ apiKey });
    const startTime = Date.now();

    // === 1. F√ÅZIS: LOGIN TESZT ===
    console.log('üìù === 1. F√ÅZIS: LOGIN TESZT ===');
    const loginStartTime = Date.now();
    const loginResult = await unasClient.login();
    const loginDuration = Date.now() - loginStartTime;
    console.log(`‚úÖ Login sikeres! (${loginDuration}ms)`);
    console.log('üìä Login eredm√©ny:', loginResult);

    // === 2. F√ÅZIS: TERM√âK LEK√âR√âS ===
    console.log('üì¶ === 2. F√ÅZIS: TERM√âK LEK√âR√âS ===');
    const productStartTime = Date.now();
    
    let productResult;
    if (productId === 'list' || !productId) {
      // Lista lek√©r√©s
      productResult = await unasClient.getProduct();
    } else {
      // Konkr√©t term√©k
      productResult = await unasClient.getProduct(productId);
    }
    
    const productDuration = Date.now() - productStartTime;
    console.log(`‚úÖ Term√©k lek√©r√©s k√©sz! (${productDuration}ms)`);

    // === 3. F√ÅZIS: EREDM√âNY FELDOLGOZ√ÅSA ===
    console.log('üìä === 3. F√ÅZIS: EREDM√âNY FELDOLGOZ√ÅSA ===');
    
    if (!productResult) {
      return NextResponse.json({
        success: false,
        error: productId ? `Term√©k ${productId} nem tal√°lhat√≥` : 'Nincsenek term√©kek',
        loginResult,
        timing: {
          login: `${loginDuration}ms`,
          product: `${productDuration}ms`,
          total: `${Date.now() - startTime}ms`
        }
      });
    }

    // Ha lista
    if (Array.isArray(productResult)) {
      console.log(`‚úÖ ${productResult.length} term√©k tal√°lva a list√°ban`);
      
      return NextResponse.json({
        success: true,
        productCount: productResult.length,
        products: productResult,
        loginResult,
        timing: {
          login: `${loginDuration}ms`,
          product: `${productDuration}ms`,
          total: `${Date.now() - startTime}ms`
        }
      });
    }
    
    // Ha konkr√©t term√©k
    console.log('‚úÖ Term√©k sikeresen lek√©rve:', productResult);
    
    return NextResponse.json({
      success: true,
      productId,
      product: productResult,
      loginResult,
      timing: {
        login: `${loginDuration}ms`,
        product: `${productDuration}ms`,
        total: `${Date.now() - startTime}ms`
      }
    });
    
  } catch (error: any) {
    console.error('‚ùå TESZT HIBA:', error);
    return NextResponse.json({
      success: false,
      error: error.message,
      help: 'Ellen≈ërizd az API kulcsot √©s a h√°l√≥zati kapcsolatot'
    }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  return NextResponse.json({
    error: 'Csak GET k√©r√©sek t√°mogatottak',
    usage: 'GET /api/unas/test-single-product?id=TERMEK_ID'
  }, { status: 405 });
} 