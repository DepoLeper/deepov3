import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '../../auth/[...nextauth]/route';
import { SimpleHybridController } from '@/lib/hybrid/SimpleHybridController';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    // Authentik√°ci√≥ ellen≈ërz√©se
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Nincs jogosults√°g' },
        { status: 401 }
      );
    }

    // Request body parse
    const body = await request.json();
    const { message, userId } = body;

    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Hi√°nyz√≥ vagy √©rv√©nytelen √ºzenet' },
        { status: 400 }
      );
    }

    // User ID meghat√°roz√°sa (email alapj√°n User rekord keres√©se)
    let actualUserId: string;
    
    console.log(`üîç User ID meghat√°roz√°sa - userId: ${userId}, email: ${session.user?.email}`);
    
    if (userId) {
      actualUserId = userId;
      console.log(`‚úÖ Haszn√°lt userId param√©ter: ${actualUserId}`);
    } else if (session.user?.email) {
      try {
        console.log(`üîç User keres√©s email alapj√°n: ${session.user.email}`);
        
        // Keres√©s email alapj√°n
        const user = await prisma.user.findUnique({
          where: { email: session.user.email }
        });
        
        if (user) {
          actualUserId = user.id;
          console.log(`‚úÖ Megl√©v≈ë User rekord tal√°lat: ${actualUserId} (${user.email})`);
        } else {
          console.log(`üìù Nincs User rekord, l√©trehoz√°s...`);
          
          // Ha nincs User rekord, hozzunk l√©tre egyet
          const newUser = await prisma.user.create({
            data: {
              email: session.user.email,
              name: session.user.name || null,
              image: session.user.image || null,
            }
          });
          actualUserId = newUser.id;
          console.log(`‚úÖ √öj User rekord l√©trehozva: ${newUser.id} (${newUser.email})`);
        }
      } catch (dbError) {
        console.error('‚ùå User keres√©si/l√©trehoz√°si hiba:', dbError);
        actualUserId = 'fallback_user';
      }
    } else {
      actualUserId = 'anonymous';
      console.log(`‚ö†Ô∏è Nincs email, anonymous user haszn√°lata`);
    }
    
    console.log(`üéØ V√©gleges actualUserId: ${actualUserId}`);

    // SimpleHybridController v4.0 haszn√°lata (Persistent Memory)
    const hybridController = new SimpleHybridController();
    const result = await hybridController.processMessage(
      actualUserId,
      `session_${Date.now()}`,
      message
    );

    // V√°lasz visszak√ºld√©se
    return NextResponse.json({
      response: result.response,
      confidence: result.confidence,
      metadata: result.metadata
    });

  } catch (error) {
    console.error('Chat API hiba:', error);
    
    return NextResponse.json(
      { 
        error: 'Bels≈ë szerver hiba',
        response: 'Sajn√°lom, hiba t√∂rt√©nt. Pr√≥b√°ld √∫jra k√©s≈ëbb!',
        confidence: 0.1,
        metadata: {
          memoryUsed: false,
          contextUsed: false,
          timestamp: new Date().toISOString(),
          processingTime: 0
        }
      },
      { status: 500 }
    );
  }
}

// Health check endpoint
export async function GET() {
  try {
    return NextResponse.json({
      status: 'ok',
      agent: 'SimpleHybridController v4.0 (DeepO)',
      timestamp: new Date().toISOString(),
      version: '4.0.0-persistent-memory',
      components: [
        'OpenAI Agents SDK',
        'PersistentMemoryManager (Prisma + SQLite)',
        'SimpleContextLoader (Content Guides)',
        'Hibrid Cache + Database architekt√∫ra'
      ]
    });
  } catch (error) {
    return NextResponse.json(
      { 
        status: 'error',
        error: 'SimpleHybrid szolg√°ltat√°s nem el√©rhet≈ë'
      },
      { status: 500 }
    );
  }
} 